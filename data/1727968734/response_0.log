Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`, and the number of multiples of `k` less than `n`. This version is shorter and makes small changes to `priority_v0`.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  remainders = set((k % i) for i in range(1, n))
  multiples = sum(i for i in range(1, n) if i % k == 0)
  return len(remainders) / n + multiples / n
```

This version uses a set to count unique remainders, which is more efficient than using a list. It also calculates the number of multiples of `k` less than `n` using a generator expression, which is more memory-efficient than using a list comprehension. The priority is then calculated as the sum of these two values, divided by `n`.