Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`. This is based on the Salem-Spencer problem, where the goal is to find the largest set of integers such that the sum of any two elements in the set is not congruent to 0 modulo `n`. The priority is higher for numbers that can potentially create more unique remainders.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`. Returns the priority based on the number of unique remainders."""
  remainders = set(k % i for i in range(1, n + 1))
  return len(remainders) / n
```

This version of `priority_v1` is short and makes a small change from `priority_v0` by considering the remainders. To further improve the priority function, you could consider additional factors, such as the distribution of remainders or the number of multiples of `n` between `k` and `n^2`.