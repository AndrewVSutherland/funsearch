Here's an improved version of `priority_v1` that considers the frequency of `k` in the range `[0, n)` and the number of possible progressions that can be formed using `k`. I've made small changes to keep the code short and focused on improving the priority calculation.

```python
from collections import Counter

@funsearch.run
def priority_v1(k: int, n: int) -> float:
    """Improved version of `priority_v0`."""
    # Count the frequency of k in the range [0, n)
    freq = sum(1 for i in range(n) if (i * k) % n == 0)

    # Calculate the number of possible progressions using k
    progressions = n // k

    # Prioritize elements with higher frequency and more progressions
    return freq * progressions
```

This version of `priority_v1` should provide a better estimate for the priority of adding `k` to the Salem-Spencer set compared to `priority_v0`. The priority is now calculated as the product of the frequency of `k` and the number of possible progressions that can be formed using `k`. This should help to find larger Salem-Spencer progressions more efficiently.