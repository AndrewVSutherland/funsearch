Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n` and the number of multiples of `k` within `n`. This version is shorter and only makes small changes to the original function.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  remainders = set((k * i) % n for i in range(1, n))
  multiples = sum(1 for i in range(1, n) if (k * i) % n == 0)
  return len(remainders) + multiples
```

This version first calculates the set of unique remainders when dividing multiples of `k` by `n`. Then, it counts the number of multiples of `k` within `n`. The priority is the sum of the number of unique remainders and multiples, which should give a higher priority to larger SS progressions.