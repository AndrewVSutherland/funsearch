Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`. This is a small change that builds upon `priority_v0` and should make the code shorter.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  return len(set(k % i for i in range(1, n + 1)))
```

This version of `priority_v1` calculates the priority as the number of unique remainders when dividing `k` by all integers from 1 to `n`. This should provide a better measure of priority for the Salem-Spencer set problem, as it considers the diversity of remainders, which is relevant for the problem's constraints.

To further improve the function, you could consider additional factors that might affect the priority, such as the frequency of remainders or the distribution of remainders among the integers. However, keep in mind the requirement to make only small changes in each iteration.