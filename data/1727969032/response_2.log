Here's an improved version of `priority_v1` that considers the frequency of `k` in all possible subsets of size `k` in the range `[1, n]`. This version uses `itertools.combinations` to generate all subsets and `np.mean` to calculate the mean frequency.

```python
from typing import List
import numpy as np
import itertools

def priority_v1(k: int, n: int) -> float:
    """Improved version of `priority_v0`."""
    freq = np.zeros(n + 1)
    for r in range(1, k + 1):
        for subset in itertools.combinations(range(1, n + 1), r):
            freq[sum(subset)] += 1
    return freq[k] / (n ** k)
```

This version makes a small change from `priority_v0` by considering the frequency of `k` in subsets of size `k`. It uses `itertools.combinations` to generate all subsets and `np.mean` to calculate the mean frequency. The result is the frequency of `k` divided by the total number of possible subsets of size `k`, which gives a measure of how likely `k` is to appear in a subset of size `k`.