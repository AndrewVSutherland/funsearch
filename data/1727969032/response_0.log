Here's an improved version of `priority_v1` that considers the frequency of `k` in all possible subsets of size `k` in the range `[1, n]`. This version uses the `combinations` function from `itertools` to generate all possible subsets and counts the occurrences of `k` in each subset.

```python
import itertools

def priority_v1(k: int, n: int) -> float:
    """Improved version of `priority_v0`."""
    count = sum(1 for subset in itertools.combinations(range(1, n + 1), k) if k in subset)
    return count / (n ** k)
```

This version of `priority_v1` makes a small change by introducing a counter to track the frequency of `k` in all possible subsets of size `k`. The priority is then calculated as the ratio of this count to the total number of possible subsets (`n ** k`).