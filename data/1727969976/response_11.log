Here's an improved version of `priority_v1` that takes into account the number of divisors of `k`:

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  divisors = sum(1 for i in range(1, k + 1) if k % i == 0)
  return k / n * divisors
```

In this version, the priority of `k` is calculated as `k / n` times the number of divisors of `k`. This way, numbers with more divisors will have a higher priority, as they are likely to lead to more complex progressions.