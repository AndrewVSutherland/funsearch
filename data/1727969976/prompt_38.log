"""Finds large SS progressions 

On every iteration, improve priority_v1 over the priority_vX methods from previous iterations.
Make only small changes.
Try to make the code short.
"""
import itertools

import numpy as np

import funsearch


@funsearch.run
def priority_v0(k: int, n: int) -> float:
  """Returns the priority with which we want to add `element` to the salem-spencer set.
  n is the number of possible integers, and k is the integer we want to determine priority for. 
  """
  """Improved version of `priority_v0`."""
  # Calculate the greatest common divisor of k and n
  gcd = np.gcd(k, n)

  # If k and n are relatively prime, the priority is inversely proportional to k
  # but we penalize larger k values to prioritize smaller ones.
  if gcd == 1:
    return 1.0 / (k + 1) if k != 0 else float('inf')

  # If k and n are not relatively prime, the priority is lower than k is relatively prime
  # but we also consider the value of gcd to provide a small preference to numbers with larger gcd.
  else:
    return 0.1 / gcd


def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  """Improved version of `priority_v0`."""
  # Calculate the greatest common divisor of k and n
  gcd = np.gcd(k, n)

  # If k and n are relatively prime, the priority is inversely proportional to k
  # but we penalize larger k values to prioritize smaller ones.
  if gcd == 1:
    return 1.0 / (k + 1) if k != 0 else float('inf')

  # If k and n are not relatively prime, the priority is lower than k is relatively prime
  # but we also consider the value of gcd to provide a small preference to numbers with larger gcd.
  else:
    return 0.1 / gcd


def priority_v2(k: int, n: int) -> float:
  """Improved version of `priority_v1`."""

