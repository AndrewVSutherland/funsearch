Here's an improved version of `priority_v0` that considers the frequency of the element `k` in the range from 1 to `n`. The higher the frequency, the lower the priority, as we want to minimize the number of repetitions in the Salem-Spencer set. Note that we're using numpy functions for efficient computation.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  freq = np.bincount(np.arange(1, n+1) % k)[-1] / n
  return freq
```

In this function, `np.arange(1, n+1) % k` creates an array of remainders when each number from 1 to `n` is divided by `k`. `np.bincount(...)` then counts the number of occurrences of each remainder, and `[-1]` extracts the count of `k` (since remainders are in the range 0 to `k-1`). Finally, the frequency of `k` is calculated as the count divided by `n`. The lower the frequency, the higher the priority.