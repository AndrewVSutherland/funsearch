Here is a simple improvement to the priority function based on a heuristic. The priority of an integer `k` is determined by how much it contributes to forming larger sequences in the Salem-Spencer set. A larger priority indicates a higher likelihood of `k` being part of a larger progression.

The function `priority_v1` adds a term to the priority that is proportional to the maximum length of an arithmetic sequence that can be formed using `k` as the smallest or largest element. This length is calculated as the integer division of `n` by `k`, which gives the number of multiples of `k` that are less than `n`.

Here is the Python implementation:

```python
def priority_v1(k: int, n: int) -> float:
  """Returns the priority of `k`. Larger priority indicates a higher likelihood of `k` being part of a larger progression."""
  max_sequence_length = n // k  # maximum length of sequence that can be formed using `k`
  return float(max_sequence_length)
```

This function assumes that all integers from `1` to `n` are possible elements of the Salem-Spencer set. It also assumes that the priority is additive, i.e., the priority of a set of integers is the sum of their individual priorities. This might not be the case in a more sophisticated model, but it's a reasonable assumption for a simple heuristic.