"""Finds large SS progressions 

On every iteration, improve priority_v1 over the priority_vX methods from previous iterations.
Make only small changes.
Try to make the code short.
"""
import itertools

import numpy as np

import funsearch


@funsearch.run
def priority_v0(k: int, n: int) -> float:
  """Returns the priority with which we want to add `element` to the salem-spencer set.
  n is the number of possible integers, and k is the integer we want to determine priority for. 
  """
  """Improved version of `priority_v0`.
  The priority is calculated based on the modulo of `k` with `n`.
  Integers that are relatively prime to `n` and smaller in value get higher priority.
  """
  # Calculate the greatest common divisor of k and n
  gcd = np.gcd(k, n)

  # If k and n are relatively prime, the priority is inversely proportional to k
  # This prioritizes smaller integers over larger ones
  if gcd == 1:
    return 1.0 / k if k != 0 else float('inf')

  # If k and n are not relatively prime, the priority is lower
  else:
    return 0.0


def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  return 0.0


def priority_v2(k: int, n: int) -> float:
  """Improved version of `priority_v1`."""

