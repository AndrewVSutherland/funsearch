Here's how you could improve `priority_v0` to `priority_v1`. Let's try to assign a higher priority to larger numbers, as they are likely to make larger progressions in the Salem-Spencer set. This is just a simple example and the priority function could be much more complex and incorporate other factors as well.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  return k / n  # normalize k to be between 0 and 1
```

In this version, the priority is calculated as the ratio of the number `k` to the total number `n`. This means that numbers closer to `n` will have a higher priority, while numbers closer to 0 will have a lower priority. This should make it more likely for larger numbers to be added to the Salem-Spencer set, which is the desired behavior.

Please adapt this to your exact needs and consider whether additional factors should be taken into account in the priority calculation.