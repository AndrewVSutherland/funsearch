There are several ways to improve the `priority_v1` function based on the given problem. However, without more specific criteria and context, it's hard to make a meaningful improvement.

Given that the function is intended to determine the priority of adding an integer `k` to a Salem-Spencer set, we could consider the frequency of `k`'s divisors within the set of all possible integers as a priority measure. This is because large SS progressions often involve numbers with many divisors.

Here's a possible implementation:

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  divisors = [i for i in range(1, k + 1) if k % i == 0]
  return len(divisors) / n
```

In this implementation, `divisors` is a list of all divisors of `k`. The priority is then defined as the ratio of the number of divisors to the total number of possible integers `n`.

This is a very basic improvement and may not be suitable for your specific needs. For example, it might be more beneficial to consider the number of distinct divisors, or to use a more complex measure of priority that takes into account the current state of the Salem-Spencer set.