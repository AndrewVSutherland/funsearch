To improve the `priority_v1` function over `priority_v0`, we need to determine a better metric to compute the priority with which we want to add an integer `k` to the Salem-Spencer set.

The Salem-Spencer set is a subset of integers that have a special property related to the Riemann zeta function. To determine the priority, we could consider the following factors:

1. The absolute value of `k`: Larger absolute values might have a higher priority since they contribute more to the set's properties.
2. The proportion of `k` compared to `n`: Integers that are closer to `n` might have a lower priority since adding them to the set could make it harder to satisfy the set's properties.
3. The number of prime factors of `k`: Integers with more prime factors might have a higher priority since they contribute more unique information to the set.

Given these factors, an improved version of `priority_v1` could be:

```python
def priority_v1(k: int, n: int) -> float:
    """Improved version of `priority_v0`."""
    # Factor 1: Absolute value of k
    abs_val_priority = abs(k)

    # Factor 2: Proportion of k to n
    proportion_priority = 1 - abs(k) / n

    # Factor 3: Number of prime factors of k
    prime_factors = set(factor for i in range(2, k + 1) if k % i == 0 for factor in itertools.takewhile(lambda x: x * x <= i, range(2, i)) if i % factor == 0)
    prime_factors_priority = len(prime_factors)

    # Combine the factors with weights
    total_priority = 0.5 * abs_val_priority + 0.3 * proportion_priority + 0.2 * prime_factors_priority

    return total_priority
```

This version of `priority_v1` uses a weighted sum of the three factors to compute the priority. The weights can be adjusted based on the importance of each factor in the specific application.