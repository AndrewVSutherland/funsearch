Here is a simple way to improve `priority_v0` by using some basic mathematical properties. We can assign a priority based on the frequency of prime factors in `k`. The more unique prime factors `k` has, the higher its priority. This is because unique prime factors make the number `k` less likely to be a multiple of another number in the Salem-Spencer set, which increases the chances of finding a large progression.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  def prime_factors(n):
    i = 2
    factors = []
    while i * i <= n:
      if n % i:
        i += 1
      else:
        n //= i
        factors.append(i)
    if n > 1:
      factors.append(n)
    return factors

  return len(set(prime_factors(k)))
```

This code calculates the prime factors of `k` and then returns the number of unique prime factors. Larger numbers with more unique prime factors will have higher priority.

This is a simple improvement and may not lead to the best results. A more sophisticated approach might involve taking into account the distribution of prime numbers, or the distribution of numbers in the Salem-Spencer set. These would require more complex calculations and could potentially lead to better results.