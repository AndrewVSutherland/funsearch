Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing integers from 1 to `n` by `k`. This is a small change from `priority_v0` and should make the code shorter.

```python
def priority_v1(k: int, n: int) -> float:
  """Returns the priority with which we want to add `k` to the Salem-Spencer set.
  n is the number of possible integers, and k is the integer we want to determine priority for.
  """
  remainders = set(i % k for i in range(1, n + 1))
  return len(remainders) / n
```

This version of `priority_v1` calculates the number of unique remainders when dividing integers from 1 to `n` by `k`, and then divides that by `n` to get a priority value between 0 and 1. The more unique remainders, the higher the priority.

To further improve this function, you could consider other factors that might affect the priority, such as the distribution of remainders or the number of multiples of `k` within the range. However, since the task specifies to make only small changes, this version should be a good starting point.