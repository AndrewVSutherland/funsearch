Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`. This is a simple improvement that doesn't significantly change the code length.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  return len(set(k % i for i in range(1, n + 1)))
```

And here's a further improvement for `priority_v2` that also considers the number of divisors of `k` and `n`. This version uses the `math` library for the `gcd` function and `numpy` for the `unique` function.

```python
import math
import numpy as np

def priority_v2(k: int, n: int) -> float:
  """Improved version of `priority_v1`."""
  remainders = np.unique(k % np.arange(1, n + 1))
  divisors_k = len(set(math.gcd(k, i) for i in range(1, k + 1)))
  divisors_n = len(set(math.gcd(n, i) for i in range(1, n + 1)))
  return len(remainders) * divisors_k * divisors_n
```