Here's an improved version of `priority_v1` with small changes to make it shorter and more efficient. I've also added a docstring to explain the purpose of the function.

```python
def priority_v2(k: int, n: int) -> float:
  """Returns the priority with which we want to add `k` to the Salem-Spencer set of size `n`.
  The priority is based on the number of unique remainders when adding `k` to each integer in the range `[0, n)`.
  """
  return sum(i not in {k + j for j in range(n)} for i in range(n)) / n + 0.01 * (n - sum(i in {k + j for j in range(n)} for i in range(n)))
```

This version of the function uses a generator expression inside the `sum` function to calculate the number of unique remainders more efficiently. It also inverts the condition inside the `sum` function to avoid calculating the complement of the set twice.