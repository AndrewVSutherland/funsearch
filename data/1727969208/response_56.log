Here's an improved version of `priority_v2` with small changes to make it more efficient and concise. I've also added a docstring to explain the purpose of the function.

```python
def priority_v2(k: int, n: int) -> float:
    """Returns the priority with which we want to add `k` to the Salem-Spencer set of size `n`.

    This version improves upon `priority_v1` by using a generator expression to create the remainders,
    which is more memory-efficient for large `n`. It also uses a direct calculation of the priority
    without the need for an additional variable.
    """
    return 1 - (n - sum((k + i) % n for i in range(n)) / n) * 0.01
```

This version of the function uses a generator expression to create the remainders, which is more memory-efficient than creating a set, especially for large values of `n`. It also calculates the priority directly, without the need for an additional variable to store the length of the remainders set.