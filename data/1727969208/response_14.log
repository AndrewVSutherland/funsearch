Here's an improved version of `priority_v1` that considers the number of elements in the Salem-Spencer set that are less than `k`. This version uses the `itertools.combinations` function to generate all possible subsets of size `k` from the range `[1, n]`, and then calculates the number of subsets that contain elements less than `k`.

```python
import itertools

def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  return sum(1 for _ in itertools.combinations(range(1, k), k - 1)) / (n ** k)
```

This version of `priority_v1` should perform better than `priority_v0` as it takes into account the structure of the Salem-Spencer set. The small change made to improve the priority function is to consider the number of subsets of size `k-1` that can be formed from the elements less than `k`, which gives an indication of how likely it is that `k` will be included in a subset of size `k` when adding elements to the set.