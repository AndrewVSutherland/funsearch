Here's an improved version of `priority_v2` with a small change to make it more efficient by avoiding the creation of a set and using a counter instead:

```python
from collections import Counter

def priority_v2(k: int, n: int) -> float:
    """Improved version of `priority_v1`."""
    remainders = Counter((k + i) % n for i in range(n))
    return sum(v / n for v in remainders.values()) + 0.01 * (n - len(remainders))
```

This version uses a `Counter` to count the occurrences of each remainder, which is more efficient than creating a set and then converting it to a list to count the occurrences. The `sum` function with a generator expression is used to calculate the average of the counts, and the formula for priority is the same as before.