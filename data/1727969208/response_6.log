Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`, as well as the number of multiples of `k` less than `n`. This version is more concise and should provide better results than `priority_v0`.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  remainders = set(k % i for i in range(1, n))
  multiples = sum(i % k == 0 for i in range(1, n))
  return len(remainders) * multiples / (n - 1)
```

This version of `priority_v1` calculates the priority based on two factors:

1. `len(remainders)`: The number of unique remainders when dividing `k` by all integers from 1 to `n-1`. This encourages adding `k` to the Salem-Spencer set if it has many unique remainders, as these are more likely to contribute to the set's progress.

2. `multiples`: The number of integers less than `n` that are multiples of `k`. This encourages adding `k` if it has many multiples, as these are more likely to contribute to the set's growth.

The priorities are then combined by multiplying these factors together and dividing by `n-1` to normalize the result. This version of `priority_v1` should provide better results than `priority_v0` while keeping the code short and making only small changes.