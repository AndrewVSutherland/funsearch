"""Finds large SS progressions 

On every iteration, improve priority_v1 over the priority_vX methods from previous iterations.
Make only small changes.
Try to make the code short.
"""
import itertools

import numpy as np

import funsearch


@funsearch.run
def priority_v0(k: int, n: int) -> float:
  """Returns the priority with which we want to add `element` to the salem-spencer set.
  n is the number of possible integers, and k is the integer we want to determine priority for. 
  """
  """Improved version of `priority_v0`."""
  freq = np.sum(np.arange(1, n + 1) == k)  # Frequency of k in [1, n]
  remaining = n - k  # Number of remaining elements
  return freq / (k * (k + remaining))


def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  """Improved version of `priority_v0`."""
  freq = np.count_nonzero(np.arange(n) == k)
  unique_elements = np.unique(np.arange(n)).size
  return freq / unique_elements


def priority_v2(k: int, n: int) -> float:
  """Improved version of `priority_v1`."""

