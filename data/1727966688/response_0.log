Here is a possible improved version of `priority_v0` using a simple heuristic where we prioritize larger numbers and numbers that are close to the current sum of the set.

```python
def priority_v1(k: int, n: int, current_set: set) -> float:
  """Improved version of `priority_v0`."""
  # Prioritize larger numbers
  base_priority = k / n

  # Prioritize numbers that are close to the current sum of the set
  if current_set:
    current_sum = sum(current_set)
    distance_priority = 1 / (abs(k - current_sum) + 1)  # Add 1 to avoid division by zero
    base_priority += distance_priority

  return base_priority
```

This function takes an additional argument `current_set`, which is the current set of numbers in the Salem-Spencer set. It then adds a priority to the number `k` based on its distance to the current sum of the set. The closer `k` is to the current sum, the higher its priority. This helps to find large SS progressions, as numbers that are close to the current sum are more likely to lead to large progressions.