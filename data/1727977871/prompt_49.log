"""Finds large SS progressions 

On every iteration, improve priority_v1 over the priority_vX methods from previous iterations.
Make only small changes.
Try to make the code short.
"""
import itertools

import numpy as np

import funsearch


@funsearch.run
def priority_v0(k: int, n: int) -> float:
  """Returns the priority with which we want to add `element` to the salem-spencer set.
  n is the number of possible integers, and k is the integer we want to determine priority for. 
  """
  return 0.0


def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  """Improved version of `priority_v0`."""
  if k <= 1 or k > n:
    return 0.0

  # Count the number of prime factors of k
  factors = set()
  i = 2
  while i * i <= k:
    if k % i:
      i += 1
    else:
      k //= i
      factors.add(i)

  if k > 1:
    factors.add(k)

  # Prioritize numbers with more unique prime factors
  return len(factors)


def priority_v2(k: int, n: int) -> float:
  """Improved version of `priority_v1`."""

