Here is a possible improvement for `priority_v2`. This version takes into account the frequency of each integer in the set of possible integers. Integers that occur less frequently may be more likely to form a progression with other numbers, so they get a higher priority.

```python
def priority_v2(k: int, n: int, frequency: Dict[int, float]) -> float:
  """Improved version of `priority_v1`."""

  # Priority is inversely proportional to the integer's value and frequency
  # This means that smaller numbers that occur less frequently get higher priority
  return (1 / k) * (1 / frequency[k]) if k != 0 else 0
```

In this version, `frequency` is a dictionary where the keys are the possible integers and the values are their frequencies. This dictionary would need to be computed before calling this function.

This version of the function may be more effective at finding large Salem-Spencer progressions, as it takes into account the frequency of each integer in the set of possible integers. However, it may also be slower to compute, as it requires additional memory to store the `frequency` dictionary and additional time to compute it.