"""Finds large SS progressions 

On every iteration, improve priority_v1 over the priority_vX methods from previous iterations.
Make only small changes.
Try to make the code short.
"""
import itertools

import numpy as np

import funsearch


@funsearch.run
def priority_v0(k: int, n: int) -> float:
  """Returns the priority with which we want to add `element` to the salem-spencer set.
  n is the number of possible integers, and k is the integer we want to determine priority for. 
  """
  """Improved version of `priority_v0`.
  Here we consider the modulo of k with various small numbers (2, 3, 5, 7) to give some priority to numbers that are not divisible by these,
  as they might be more likely to form a progression with other numbers.
  """
  priority = 0.0
  for i in [2, 3, 5, 7]:
    if k % i != 0:
      priority += 1
  return priority


def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  """Returns the priority with which we want to add `k` to the Salem-Spencer set.
  `n` is the number of possible integers, and `k` is the integer we want to determine priority for.
  """
  # Priority is inversely proportional to the integer's value
  # This means that smaller numbers get higher priority
  return 1 / k if k != 0 else 0


def priority_v2(k: int, n: int) -> float:
  """Improved version of `priority_v1`."""

