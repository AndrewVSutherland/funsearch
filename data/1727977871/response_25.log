The original problem statement is quite open-ended and doesn't provide specific details about the Salem-Spencer set or the parameters `k` and `n`. However, based on common practices in optimization problems, I'll assume that higher values of `k` are preferable and that `n` is the total number of possible elements from which we can choose.

With this assumption, a simple improvement over `priority_v0` could be to return the value of `k` as the priority. This way, larger `k` values will have a higher priority. Here's how you could implement this in Python:

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  return float(k)
```

This function simply returns the value of `k` as a float, which can be used as a priority score. Larger `k` values will result in higher priority scores, which should help to find large SS progressions.