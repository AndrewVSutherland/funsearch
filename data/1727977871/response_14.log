Here's a simple improvement to the `priority_v0` function. This version prioritizes larger numbers, since larger numbers tend to have more divisors, which can lead to larger progressions.

```python
def priority_v1(k: int, n: int) -> float:
  """Returns the priority with which we want to add `k` to the salem-spencer set.
  `n` is the number of possible integers, and `k` is the integer we want to determine priority for.
  """
  return k / n
```

In this version, the priority is calculated as the ratio of `k` to `n`. This means that larger `k` values will have a higher priority than smaller `k` values, assuming `n` is a positive integer. This could help us find larger SS progressions more efficiently.