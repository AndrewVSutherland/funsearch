Understood. In this context, a "Salem-Spencer set" is a set of integers with certain properties related to the distribution of prime numbers. The function `priority_v1` will now be an improved version of `priority_v0`, which calculates the priority with which to add a given integer `k` to the Salem-Spencer set. The integer `n` represents the total number of possible integers.

To improve upon `priority_v0`, I propose adding a simple heuristic that considers two factors: the proximity of `k` to `n` (since larger numbers might have a higher chance of being part of the set), and the frequency of `k` in the prime factorization of numbers up to `n`.

Let's implement this as a Python function.
```python
from collections import Counter
import sympy

def prime_factors(n):
    i = 2
    factors = []
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors

def priority_v1(k: int, n: int) -> float:
    # Proximity to n
    proximity_score = k / n

    # Frequency in prime factorization
    prime_factors_list = list(itertools.chain(*[prime_factors(i) for i in range(2, n+1)]))
    frequency_score = Counter(prime_factors_list)[k] / len(prime_factors_list)

    # Combine scores
    priority = (proximity_score + frequency_score) / 2

    return priority

# Test the function
print(priority_v1(5, 20))
```