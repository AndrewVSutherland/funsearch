Here's a possible improvement for `priority_v1`.

We can give higher priority to numbers that are closer to the expected mean of the Salem-Spencer set, which is approximately `n/2`. The closer a number is to this mean, the more likely it is to be part of a large progression.

```python
def priority_v1(k: int, n: int) -> float:
  """Returns the priority with which we want to add `k` to the salem-spencer set."""
  return 1.0 / abs(k - n/2)
```

This function returns a priority that is inversely proportional to the distance of `k` from `n/2`. The closer `k` is to `n/2`, the higher its priority.

However, this function has a problem: it gives infinite priority to `n/2` when `n` is even, which is not what we want. To fix this, we can add a small constant to the denominator:

```python
def priority_v1(k: int, n: int) -> float:
  """Returns the priority with which we want to add `k` to the salem-spencer set."""
  return 1.0 / (abs(k - n/2) + 1e-9)
```

This way, the priority of `n/2` is not infinite, and it is still much higher than the priority of any other number.

This is just a simple example of how we might improve the priority function. The actual function to use would depend on more detailed knowledge of the problem and potentially more complex calculations.