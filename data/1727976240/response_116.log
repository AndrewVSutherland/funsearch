def priority_v2(k: int, n: int) -> float:
  """Improved version of `priority_v1`.

  The priority is calculated as (k - n/2)^2 / n, which gives more weight to integers
  closer to the middle of the range.
  """
  return (k - n/2)**2 / n


def salem_spencer_set(n: int, max_size: int) -> np.ndarray:
  """Returns a Salem-Spencer set of size `max_size` containing integers from 0 to `n`.

  The Salem-Spencer set is a subset of integers that maximizes the sum of the squares of its
  elements, subject to the constraint that no two elements have a common prime factor.

  Args:
    n: The maximum integer that can be included in the set.
    max_size: The maximum size of the set.

  Returns:
    A numpy array containing the integers in the Salem-Spencer set.
  """
  # Initialize an empty set.
  ss = set()

  # Iterate over all possible integers from 0 to n.
  for k in range(n + 1):
    # Calculate the priority of adding k to the set.
    p = priority_v2(k, n)

    # If adding k to the set would not exceed the maximum size, and k is not already in the set,
    # and k does not have a common prime factor with any element in the set, then add it to the
    # set.
    if len(ss) < max_size and k not in ss and not any(gcd(k, x) > 1 for x in ss):
      ss.add(k)

  # Return the set as a numpy array.
  return np.array(list(ss))


def gcd(a: int, b: int) -> int:
  """Returns the greatest common divisor of a and b."""
  while b != 0:
    a, b = b, a % b
  return a


def main():
  # Find the largest Salem-Spencer set containing integers from 0 to 1000.
  n = 1000
  max_size = 100
  ss = salem_spencer_set(n, max_size)

  # Print the set and its sum of squares.
  print("Salem-Spencer set:")
  print(ss)
  print("Sum of squares:", np.sum(ss**2))


if __name__ == "__main__":
  main()