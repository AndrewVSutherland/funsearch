"""Improved version of `priority_v1`."""

  # Assigns a higher priority to larger numbers.
  # Also, penalizes numbers that are close to multiples of other numbers in the set.

  def penalty(k, ss_set):
    """Computes the penalty for adding k to the Salem-Spencer set ss_set."""
    penalty = 0.0
    for num in ss_set:
      if k % num < 3:  # If k is close to a multiple of num
        penalty += 1.0 / num
    return penalty

  priority = k / n
  if len(funsearch.ss_set) > 0:
    priority -= penalty(k, funsearch.ss_set)
  return priority


def priority_v3(k: int, n: int) -> float:
  """Improved version of `priority_v2`."""

  # Assigns a higher priority to larger numbers.
  # Also, penalizes numbers that are close to multiples of other numbers in the set.
  # Also, gives a bonus for numbers that are close to the average of the numbers in the set.

  def penalty(k, ss_set):
    """Computes the penalty for adding k to the Salem-Spencer set ss_set."""
    penalty = 0.0
    for num in ss_set:
      if k % num < 3:  # If k is close to a multiple of num
        penalty += 1.0 / num
    return penalty

  def bonus(k, ss_set):
    """Computes the bonus for adding k to the Salem-Spencer set ss_set."""
    if len(ss_set) == 0:
      return 0.0
    avg = sum(ss_set) / len(ss_set)
    return 1.0 / abs(k - avg)

  priority = k / n
  if len(funsearch.ss_set) > 0:
    priority -= penalty(k, funsearch.ss_set)
    priority += bonus(k, funsearch.ss_set)
  return priority


def priority_v4(k: int, n: int) -> float:
  """Final version of the priority function."""

  # Assigns a higher priority to larger numbers.
  # Also, penalizes numbers that are close to multiples of other numbers in the set.
  # Also, gives a bonus for numbers that are close to the average of the numbers in the set.
  # Also, gives a bonus for numbers that are close to the product of the numbers in the set.

  def penalty(k, ss_set):
    """Computes the penalty for adding k to the Salem-Spencer set ss_set."""
    penalty = 0.0
    for num in ss_set:
      if k % num < 3:  # If k is close to a multiple of num
        penalty += 1.0 / num
    return penalty

  def bonus(k, ss_set):
    """Computes the bonus for adding k to the Salem-Spencer set ss_set."""
    if len(ss_set) == 0:
      return 0.0
    avg = sum(ss_set) / len(ss_set)
    product = np.prod(ss_set)
    return 1.0 / abs(k - avg) + 1.0 / abs(k - product)

  priority = k / n
  if len(funsearch.ss_set) > 0:
    priority -= penalty(k, funsearch.ss_set)
    priority += bonus(k, funsearch.ss_set)
  return priority