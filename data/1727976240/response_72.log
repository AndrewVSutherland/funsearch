def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  # Prioritize larger numbers and numbers closer to the middle of the range
  middle = n // 2
  distance_from_middle = abs(k - middle)
  return (n - distance_from_middle) / n


def generate_candidates(ss_set: set, n: int) -> list:
  """Generates a list of candidate integers to add to the salem-spencer set."""
  candidates = [k for k in range(n) if k not in ss_set]
  candidates.sort(key=lambda k: priority_v1(k, n), reverse=True)
  return candidates


def is_ss_progression(seq: list) -> bool:
  """Checks if the given sequence is a Salem-Spencer progression."""
  diff_set = set(seq[i] - seq[i - 1] for i in range(1, len(seq)))
  return len(diff_set) == len(seq) - 1


def find_large_ss_progressions(size: int, n: int) -> list:
  """Finds large Salem-Spencer progressions."""
  ss_sets = []
  for _ in range(size):
    ss_set = set()
    candidates = generate_candidates(ss_set, n)
    while len(ss_set) < n and candidates:
      candidate = candidates.pop(0)
      if all(candidate - k not in ss_set for k in ss_set):
        ss_set.add(candidate)
        if is_ss_progression(list(ss_set)):
          ss_sets.append(ss_set)
          break
  return ss_sets


def main():
  size = 10
  n = 100
  ss_progressions = find_large_ss_progressions(size, n)
  for i, ss_set in enumerate(ss_progressions):
    print(f"Salem-Spencer progression {i + 1}: {sorted(list(ss_set))}")


if __name__ == "__main__":
  main()

The `priority_v1` function calculates the priority of adding an integer `k` to the Salem-Spencer set based on its distance from the middle of the range. Larger numbers and numbers closer to the middle are prioritized.

The `generate_candidates` function generates a list of candidate integers to add to the Salem-Spencer set, sorts them based on their priority, and returns the sorted list.

The `is_ss_progression` function checks if the given sequence is a Salem-Spencer progression by checking if the set of differences between consecutive elements has the same size as the sequence minus one.

The `find_large_ss_progressions` function finds large Salem-Spencer progressions. It initializes an empty list to store the found progressions, generates candidates for the Salem-Spencer set, and iteratively adds candidates to the set while checking if the set forms a Salem-Spencer progression.

The `main` function sets the size and range of the progressions to find, calls `find_large_ss_progressions` to find the progressions, and prints them.