"""Finds large SS progressions 

On every iteration, improve priority_v1 over the priority_vX methods from previous iterations.
Make only small changes.
Try to make the code short.
"""
import itertools

import numpy as np

import funsearch


@funsearch.run
def priority_v0(k: int, n: int) -> float:
  """Returns the priority with which we want to add `element` to the salem-spencer set.
  n is the number of possible integers, and k is the integer we want to determine priority for. 
  """
  """Improved version of `priority_v0`.

  The priority is calculated as k/n, which represents the ratio of the integer to the total number of possible integers.
  """
  return k / n


def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  """Improved version of `priority_v1`.

  The priority is calculated as k^2 / n, which gives more weight to larger integers.
  """
  return k**2 / n


def priority_v2(k: int, n: int) -> float:
  """Improved version of `priority_v1`."""

