To improve the `priority_v1` function over `priority_v0`, we can consider the following changes:

1. Use a simple heuristic based on the value of `k` and `n`. A possible approach is to calculate the ratio of `k` to `n`, as this gives us an idea of how close `k` is to `n`. A larger ratio indicates a larger value of `k`, which might be more desirable for adding to the Salem-Spencer set.
2. Normalize the priority value to be between 0 and 1. This ensures that the priority values are comparable and can be used effectively in the search algorithm.

Here's an improved version of the `priority_v1` function:

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  # Calculate the ratio of k to n
  ratio = k / n

  # Normalize the ratio to be between 0 and 1
  normalized_ratio = ratio / max(k, n)

  return normalized_ratio
```

This function calculates the ratio of `k` to `n` and then normalizes it to be between 0 and 1. The normalized ratio is then returned as the priority value.