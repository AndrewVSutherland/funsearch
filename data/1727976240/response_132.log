Here is a simple way to prioritize the addition of an integer `k` to a Salem-Spencer set. The priority is calculated based on the size of the gap between `k` and the nearest integer in the current set. A larger gap indicates a less likely chance of forming a progression, so we prioritize these integers.

```python
def priority_v1(k: int, s: set) -> float:
  """Returns the priority with which we want to add `k` to the salem-spencer set `s`."""
  if not s:
    return float('inf')
  return 1.0 / min(abs(k - i) for i in s)

def priority_v2(k: int, s: set) -> float:
  """Improved version of `priority_v1`.
  This version penalizes the priority if k is close to any existing element in the set."""
  if not s:
    return float('inf')
  gap = min(abs(k - i) for i in s)
  close_elements = sum(1 for i in s if abs(k - i) < gap)
  return gap / (close_elements + 1)
```

In `priority_v1`, we use the reciprocal of the smallest gap between `k` and any existing integer in the set. This effectively prioritizes integers that are far from any in the set.

In `priority_v2`, we add a penalty to the priority if `k` is close to multiple existing integers in the set. This helps to avoid situations where adding `k` to the set creates multiple small gaps.

Both functions assume that the Salem-Spencer set `s` is given as input. You might want to modify them to work with a sorted list or another data structure, depending on the specifics of your use case.