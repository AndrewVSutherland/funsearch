Below is an improved version of `priority_v0` that takes into account the size of the integer `k` and the total number of possible integers `n`. The priority is calculated as the ratio of the square of `k` to the square of `n`, which gives higher priority to larger integers.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`.
  The priority is calculated as the ratio of the square of `k` to the square of `n`.
  """
  return (k ** 2) / (n ** 2)
```

This function returns a value between 0 and 1, where 1 indicates the highest priority. When `k` is large compared to `n`, the priority will be high, and when `k` is small, the priority will be low. This method might be suitable for finding large progressions in Salem-Spencer sets, as it gives higher priority to larger integers, which are more likely to form large progressions. However, the effectiveness of this method would depend on the specific characteristics of the Salem-Spencer sets being studied.