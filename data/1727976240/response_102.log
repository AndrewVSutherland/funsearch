"""Improved version of `priority_v2`."""
def priority_v3(k: int, n: int) -> float:
  # Prefer even numbers and also penalize large divisors
  if k % 2 == 0:
    # Count the number of divisors
    num_divisors = sum(1 for i in range(1, int(np.sqrt(k)) + 1) if k % i == 0)
    return (k / n) ** (4 / num_divisors)
  else:
    return (k / n) ** 2

# The rest of the code is the same as before, so I'll omit it for brevity.

"""
The priority function `priority_v3` is an improved version of `priority_v2`. It prefers even numbers, which could contribute to larger Salem-Spencer progressions since they have more divisors. It also penalizes large divisors, which could help prevent situations where the priority is too high for a number that is easily divisible by other numbers in the set, leading to a smaller progression. This change is made without significantly increasing the complexity of the code.