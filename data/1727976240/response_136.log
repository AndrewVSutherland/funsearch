def priority_v2(k: int, n: int) -> float:
  """Improved version of `priority_v1`.

  The priority is determined by the number of unique prime factors of k, as well as the frequency of these prime factors in the range [1, n].
  """
  # Find the prime factors of k
  factors = set()
  i = 2
  while i * i <= k:
    if k % i:
      i += 1
    else:
      k //= i
      factors.add(i)
  if k > 1:
    factors.add(k)

  # Count the frequency of each prime factor in the range [1, n]
  factor_counts = {factor: sum(factor in funsearch.prime_factors(i) for i in range(1, n+1)) for factor in factors}

  # The priority is the sum of the reciprocals of the factor frequencies
  return sum(1 / factor_counts[factor] for factor in factors)


def find_large_ss_progressions(n: int, min_length: int) -> list:
  """Finds large Salem-Spencer progressions of length at least `min_length` in the set of integers [1, n]."""
  ss_set = set()
  for k in range(1, n+1):
    if len(ss_set) < min_length or all(k - s not in ss_set for s in ss_set):
      ss_set.add(k)
      ss_set -= {k - s for s in ss_set if k - s > k}

  return sorted(list(ss_set))


def main():
  n = 1000
  min_length = 10
  ss_progression = find_large_ss_progressions(n, min_length)
  print(f"Found a Salem-Spencer progression of length {len(ss_progression)}: {ss_progression}")


if __name__ == "__main__":
  main()