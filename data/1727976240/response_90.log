It seems like we're trying to find large progressions in the Salem-Spencer set. Each function `priority_vX` is supposed to return a priority score for a given integer `k` out of a total of `n` possible integers. The priority score determines the likelihood of adding `k` to the Salem-Spencer set.

The `priority_v1` function is an improved version of `priority_v0`, and `priority_v2` is supposed to be an improved version of `priority_v1`. However, the implementations for `priority_v1` and `priority_v2` are not provided.

To provide an improved version of `priority_v0`, we could use a simple heuristic: the larger the integer `k`, the higher its priority. This is because larger integers are less likely to be part of a progression, so we might want to add them to the Salem-Spencer set first. Here's how we could implement this:

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  return k / n
```

This function returns a priority score between 0 and 1, where 1 indicates the highest priority. The priority score is simply the ratio of `k` to `n`.

For `priority_v2`, we could consider the distribution of integers in the Salem-Spencer set so far. If `k` is close to many integers already in the set, it has a lower priority, because it's more likely to complete a progression with those integers. This would require keeping track of the integers in the set, which could be more complex.