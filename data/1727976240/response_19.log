def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`.
  Takes into account the number of remaining elements that can be added to the Salem-Spencer set.
  """
  remaining_elements = n - len(funsearch.salem_spencer_set)
  return k / remaining_elements


def generate_sequences(n):
  """Generates all possible sequences of length n."""
  return itertools.product(range(1, n + 1), repeat=n)


def is_salem_spencer(seq):
  """Checks if a sequence is a Salem-Spencer sequence."""
  return all(a + b >= c for a, b, c in zip(seq, seq[1:], seq[2:]))


def find_large_ss_progressions(n):
  """Finds large Salem-Spencer progressions of length n."""
  sequences = generate_sequences(n)
  ss_sequences = filter(is_salem_spencer, sequences)
  priorities = [priority_v1(max(seq), n) for seq in ss_sequences]
  largest_ss_sequence = max(zip(ss_sequences, priorities), key=lambda x: x[1])[0]
  return largest_ss_sequence


# Test the function
print(find_large_ss_progressions(5))