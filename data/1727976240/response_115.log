@funsearch.run
def priority_v2(k: int, n: int) -> float:
  """Improved version of `priority_v1`."""
  """Considers both the value of k and its frequency in the sequence."""
  freq = np.bincount(k)[k] / n
  return k / n * (1 - freq)


def priority_v3(k: int, n: int, ss: set) -> float:
  """Improved version of `priority_v2`."""
  """Considers the potential impact of adding k to the Salem-Spencer set."""
  freq = np.bincount(k)[k] / n
  ss_with_k = ss.copy()
  ss_with_k.add(k)
  ss_sum = sum(ss_with_k)
  return k / n * (1 - freq) * (n - ss_sum)


def priority_v4(k: int, n: int, ss: set) -> float:
  """Improved version of `priority_v3`."""
  """Considers the potential impact of adding k to the Salem-Spencer set on the distribution of sums."""
  freq = np.bincount(k)[k] / n
  ss_with_k = ss.copy()
  ss_with_k.add(k)
  sums = [sum(comb) for comb in itertools.combinations(ss_with_k, 2)]
  sum_freq = np.bincount(sums)[k] / len(sums)
  return k / n * (1 - freq) * (1 - sum_freq)


def priority_v5(k: int, n: int, ss: set) -> float:
  """Improved version of `priority_v4`."""
  """Considers the potential impact of adding k to the Salem-Spencer set on the distribution of differences."""
  freq = np.bincount(k)[k] / n
  ss_with_k = ss.copy()
  ss_with_k.add(k)
  diffs = [abs(a - b) for a, b in itertools.combinations(ss_with_k, 2)]
  diff_freq = np.bincount(diffs)[k] / len(diffs)
  return k / n * (1 - freq) * (1 - diff_freq)


def priority_v6(k: int, n: int, ss: set) -> float:
  """Final version of the priority function."""
  """Considers the potential impact of adding k to the Salem-Spencer set on the distribution of sums and differences."""
  freq = np.bincount(k)[k] / n
  ss_with_k = ss.copy()
  ss_with_k.add(k)
  sums = [sum(comb) for comb in itertools.combinations(ss_with_k, 2)]
  sum_freq = np.bincount(sums)[k] / len(sums)
  diffs = [abs(a - b) for a, b in itertools.combinations(ss_with_k, 2)]
  diff_freq = np.bincount(diffs)[k] / len(diffs)
  return k / n * (1 - freq) * (1 - sum_freq) * (1 - diff_freq)


def find_ss_progressions(n: int) -> set:
  """Finds a Salem-Spencer set for the range [0, n)."""
  ss = set()
  while len(ss) < n:
    candidates = [k for k in range(n) if k not in ss]
    priorities = [priority_v6(k, n, ss) for k in candidates]
    k = candidates[np.argmax(priorities)]
    ss.add(k)
  return ss


ss = find_ss_progressions(100)
print(sorted(list(ss)))