Sure, I can help with that. Here's a potential improvement for `priority_v2`:

```python
def priority_v2(k: int, n: int) -> float:
  """Improved version of `priority_v1`."""

  # Prioritize larger numbers and numbers close to half of n (symmetry consideration)
  # Also prioritize numbers close to the quarter and three-quarter mark of n (balance consideration)
  return k / n + abs(k - n / 2) / (n / 2) + abs(k - n / 4) / (n / 4) + abs(k - 3 * n / 4) / (n / 4)
```

This modification adds two additional terms to the priority calculation. The new terms prioritize numbers that are close to the quarter and three-quarter marks of `n`. This should help to balance the set and find progressions that are more symmetric around these points.