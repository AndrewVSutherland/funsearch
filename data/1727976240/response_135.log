"""Improved version of `priority_v1`."""
  return (k / n) ** 3 if k % 2 == 0 else (k / n) ** 2.5


def priority_v3(k: int, n: int) -> float:
  """Improved version of `priority_v2`."""

  return (k / n) ** 3 if k % 2 == 0 else (k / n) ** 2.5 if k % 3 == 0 else (k / n) ** 2


def priority_v4(k: int, n: int) -> float:
  """Improved version of `priority_v3`."""

  return (k / n) ** 3 if k % 2 == 0 else (k / n) ** 2.5 if k % 3 == 0 else (k / n) ** 2 if k % 5 == 0 else (k / n) ** 1.5


def priority_v5(k: int, n: int) -> float:
  """Improved version of `priority_v4`."""

  prime_factors = set(itertools.chain(*[[i, n // i] for i in range(2, int(np.sqrt(n)) + 1) if n % i == 0]))
  if k in prime_factors:
    return (k / n) ** 3
  elif k % 2 == 0:
    return (k / n) ** 2.5
  elif k % 3 == 0:
    return (k / n) ** 2
  elif k % 5 == 0:
    return (k / n) ** 1.5
  else:
    return (k / n)


def priority_v6(k: int, n: int) -> float:
  """Improved version of `priority_v5`."""

  prime_factors = set(itertools.chain(*[[i, n // i] for i in range(2, int(np.sqrt(n)) + 1) if n % i == 0]))
  if k in prime_factors:
    return (k / n) ** 3
  elif k % 2 == 0:
    return (k / n) ** 2.5
  elif k % 3 == 0:
    return (k / n) ** 2
  elif k % 5 == 0:
    return (k / n) ** 1.5
  elif k % 7 == 0:
    return (k / n) ** 1.25
  else:
    return (k / n)


def priority_v7(k: int, n: int) -> float:
  """Improved version of `priority_v6`."""

  prime_factors = set(itertools.chain(*[[i, n // i] for i in range(2, int(np.sqrt(n)) + 1) if n % i == 0]))
  if k in prime_factors:
    return (k / n) ** 3
  elif k % 2 == 0:
    return (k / n) ** 2.5
  elif k % 3 == 0:
    return (k / n) ** 2
  elif k % 5 == 0:
    return (k / n) ** 1.5
  elif k % 7 == 0:
    return (k / n) ** 1.25
  elif k % 11 == 0:
    return (k / n) ** 1.125
  else:
    return (k / n) ** 0.875