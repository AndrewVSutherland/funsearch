def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  # Priority is still based on k/n, but we take the logarithm to better differentiate smaller numbers
  return np.log(k) / np.log(n)


@funsearch.run
def priority_v2(k: int, n: int) -> float:
  """Improved version of `priority_v1`."""
  # We add a small constant to the denominator to avoid division by zero
  return np.log(k) / np.log(n + 1e-10)


@funsearch.run
def priority_v3(k: int, n: int, ss_set: set[int]) -> float:
  """Improved version of `priority_v2`."""
  # We also consider the size of the existing Salem-Spencer set
  return np.log(k) / np.log(n + 1e-10) * len(ss_set)


@funsearch.run
def priority_v4(k: int, n: int, ss_set: set[int], k_prime_factors: list[int]) -> float:
  """Improved version of `priority_v3`."""
  # We also consider the number of prime factors of k
  return np.log(k) / np.log(n + 1e-10) * len(ss_set) / len(k_prime_factors)


def priority_v5(k: int, n: int, ss_set: set[int], k_prime_factors: list[int], ss_set_product: int) -> float:
  """Improved version of `priority_v4`."""
  # We also consider the product of the elements in the existing Salem-Spencer set
  return np.log(k) / np.log(n + 1e-10) * len(ss_set) / len(k_prime_factors) / np.log(ss_set_product + 1e-10)


def find_large_ss_progressions(n: int, size: int) -> list[list[int]]:
  """Finds all Salem-Spencer sets of size `size` with elements from {1, 2, ..., n}."""
  ss_sets = []
  for ss_set in itertools.combinations(range(1, n + 1), size):
    if is_salem_spencer_set(ss_set):
      ss_sets.append(list(ss_set))
  return ss_sets


def is_salem_spencer_set(ss_set: list[int]) -> bool:
  """Checks if a set is a Salem-Spencer set."""
  for i in range(len(ss_set)):
    for j in range(i + 1, len(ss_set)):
      if np.gcd(ss_set[i], ss_set[j]) != 1:
        return False
  return True


def main():
  n = 100  # Number of possible integers
  size = 5  # Size of Salem-Spencer sets to find
  ss_sets = find_large_ss_progressions(n, size)
  for ss_set in ss_sets:
    print(ss_set)


if __name__ == "__main__":
  main()