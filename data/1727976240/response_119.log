def priority_v2(k: int, n: int) -> float:
    """Improved version of `priority_v1`."""

    # Prioritize larger numbers and numbers close to half of n (symmetry consideration)
    # Also prioritize numbers close to the quarter and three-quarter mark of n (balance consideration)
    # Use Gaussian function to give higher weights to numbers near the center
    center = n / 2
    sigma = n / 6
    return k / n + np.exp(-(k - center) ** 2 / (2 * sigma ** 2))


def priority_v3(k: int, n: int) -> float:
    """Improved version of `priority_v2`."""

    # Prioritize larger numbers and numbers close to half of n (symmetry consideration)
    # Also prioritize numbers close to the quarter and three-quarter mark of n (balance consideration)
    # Use Gaussian function to give higher weights to numbers near the center
    # Add a term that penalizes numbers too close to the edges to avoid border effects
    center = n / 2
    sigma = n / 6
    edge_penalty = 0.1 * min(k, n - k) / (n / 2)
    return k / n + np.exp(-(k - center) ** 2 / (2 * sigma ** 2)) - edge_penalty


def find_large_ss_progressions(n: int, m: int, salem_spencer_set: set) -> list:
    """Finds large Salem-Spencer progressions of length m in the set of integers from 1 to n.

    Args:
        n: The maximum integer to consider.
        m: The length of the progressions to find.
        salem_spencer_set: The Salem-Spencer set of integers from 1 to n.

    Returns:
        A list of large Salem-Spencer progressions of length m found in the set of integers from 1 to n.
    """
    priorities = [priority_v3(k, n) for k in range(1, n + 1)]
    sorted_indices = np.argsort(priorities)[::-1]

    large_progressions = []
    for indices in itertools.combinations(sorted_indices, m):
        progression = sorted(indices)
        if all(i + d in salem_spencer_set for i, d in zip(progression, range(1, m))):
            large_progressions.append(progression)

    return large_progressions


# Example usage
n = 100
m = 5
salem_spencer_set = set(range(1, n + 1))
large_progressions = find_large_ss_progressions(n, m, salem_spencer_set)
print(large_progressions)