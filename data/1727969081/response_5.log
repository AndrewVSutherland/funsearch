Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`, as well as the difference between `k` and the average of `n` and `k`. This version also uses the `itertools.combinations` function to generate all possible remainders and their counts.

```python
from typing import Dict

@funsearch.run
def priority_v1(k: int, n: int) -> float:
    """Improved version of `priority_v0`."""
    remainders = {k % i for i in range(1, n + 1)}
    count = len(remainders)
    avg = (n + k) / 2
    return count / n + abs(k - avg)
```

This version of `priority_v1` improves upon `priority_v0` by considering the diversity of remainders and the proximity of `k` to the average of `n` and `k`. The priority is calculated as the sum of the ratio of unique remainders to `n` and the absolute difference between `k` and the average. This should provide a better measure of the priority for adding `k` to the Salem-Spencer set.