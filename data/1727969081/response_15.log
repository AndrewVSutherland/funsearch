Here's an improved version of `priority_v1` that considers the number of elements in the Salem-Spencer set that are coprime with `k`. This version uses the `math.gcd` function from the `math` module to calculate the greatest common divisor.

```python
import math

def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  coprimes = sum(1 for i in range(1, n+1) if math.gcd(i, k) == 1)
  return coprimes / n
```

This version of `priority_v1` calculates the number of integers from 1 to `n` that are coprime with `k` (i.e., have a greatest common divisor of 1 with `k`) and divides that number by `n` to get a priority value between 0 and 1.

To further improve the priority function, you could consider other factors, such as the number of elements in the Salem-Spencer set that are multiples of `k`, or the distribution of the elements in the set. Here's an example of a `priority_v2` function that considers both coprimes and multiples:

```python
def priority_v2(k: int, n: int) -> float:
  """Further improved version of `priority_v1`."""
  coprimes = sum(1 for i in range(1, n+1) if math.gcd(i, k) == 1)
  multiples = sum(1 for i in range(1, n+1) if i % k == 0)
  return (coprimes + multiples) / (2 * n)
```

This version of `priority_v2` adds the number of multiples of `k` to the number of coprimes and divides by `2n` to get a priority value between 0 and 1. You can continue to improve the priority function by considering other factors and making small changes to the code as suggested in the problem description.