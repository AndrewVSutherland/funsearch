Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`. This is inspired by the Salem-Spencer problem, where the priority is often based on the number of distinct remainders. I've made small changes to keep the code short and only improved upon the previous version.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  return len(set(k % i for i in range(1, n + 1)))
```

This version calculates the number of unique remainders when dividing `k` by all integers from 1 to `n`. The `set()` function is used to remove duplicates, and `len()` gives the count of unique remainders, which is returned as the priority.

To further improve this function, you could consider other factors like the frequency of remainders or the distribution of remainders. However, since the task requires only small changes, this version should be a good starting point.