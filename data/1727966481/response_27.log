Here's an improved version of `priority_v1` that considers the frequency of each integer in the range `[0, n)` and the distance from `k` to the nearest integer with a higher frequency. This version uses the `Counter` class from the `collections` module to count the frequencies.

```python
from collections import Counter

def priority_v1(k: int, n: int) -> float:
    """Improved version of `priority_v0`."""
    freqs = Counter(range(n))
    dist = min(abs(k - i) for i, freq in freqs.items() if freq > freqs[k])
    return 1.0 / (dist + 1) if dist > 0 else 0.0
```

This version makes a small change to `priority_v0` by adding a distance calculation and using it to determine the priority. The priority is now inversely proportional to the distance from `k` to the nearest integer with a higher frequency, with a small adjustment to avoid division by zero.