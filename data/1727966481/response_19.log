Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`, and the number of multiples of `k` less than `n`. This version is shorter and makes small changes to improve the priority function.

```python
from math import gcd

def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  # Number of unique remainders when dividing k by n
  unique_remainders = len(set(k % i for i in range(1, n + 1)))
  # Number of multiples of k less than n
  multiples_of_k = sum(i < n for i in range(k, n + 1, k))

  # Combine these factors to create the priority
  return unique_remainders * multiples_of_k / (n * gcd(k, n))
```

This version uses the `gcd` function from the `math` module to calculate the greatest common divisor of `k` and `n`. The priority is calculated as the product of the number of unique remainders and the number of multiples of `k`, divided by the product of `n` and the greatest common divisor of `k` and `n`. This should provide a better estimate for the priority of adding `k` to the Salem-Spencer set.