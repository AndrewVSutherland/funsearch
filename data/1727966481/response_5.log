Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n` and the number of multiples of `k` less than `n`. This version is shorter and makes small changes to `priority_v0`.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  remainders = set(k % i for i in range(1, n + 1))
  multiples = sum(1 for i in range(1, n // k + 1))
  return len(remainders) * multiples
```

This version first finds all unique remainders when dividing `k` by all integers from 1 to `n`. Then, it counts the number of multiples of `k` less than `n`. The priority is calculated as the product of the number of unique remainders and the number of multiples of `k`.

To further improve the function, you could consider other factors that might affect the priority, such as the sum of digits of `k` or the number of prime factors of `k`. However, keep in mind that the goal is to make small changes on each iteration and improve the priority function gradually.