Here's an improved version of `priority_v1` that considers the number of elements less than `k` and the number of elements greater than `k` in the Salem-Spencer set. This version uses the formula `n - 2 * |{x < k}|` to calculate the priority, which is a small change from `priority_v0`.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  less_than_k = sum(1 for i in range(k) if i % 2 == 0)
  return n - 2 * less_than_k
```

To further improve the function, we can consider the number of elements equal to `k` as well. This version uses the formula `n - 2 * |{x < k}| - |{x = k}|` to calculate the priority.

```python
def priority_v2(k: int, n: int) -> float:
  """Further improved version of `priority_v1`."""
  less_than_k = sum(1 for i in range(k) if i % 2 == 0)
  equal_to_k = 1 if k % 2 == 0 else 0
  return n - 2 * less_than_k - equal_to_k
```

To make the code even shorter, we can use the `itertools` module to generate the range of numbers and use a generator expression to count the number of elements less than and equal to `k`.

```python
import itertools

def priority_v3(k: int, n: int) -> float:
  """Short version of `priority_v2` using `itertools` and generator expressions."""
  return n - 2 * sum(1 for i in itertools.islice(range(k), None, 2)) - sum(1 for i in range(k) if i == k)
```

This version of the function is shorter and more concise while still providing the same functionality as the previous versions.