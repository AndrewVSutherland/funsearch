Here's an improved version of `priority_v1` that considers the frequency of `k` in the range `[0, n-1]` and the mean distance of `k` from other numbers in that range. This version uses the `itertools` library to generate all possible numbers in the range and `numpy` for efficient calculations.

```python
import itertools
import numpy as np

@funsearch.run
def priority_v1(k: int, n: int) -> float:
    """Returns the priority with which we want to add `k` to the Salem-Spencer set.
    n is the number of possible integers, and k is the integer we want to determine priority for.
    """
    # Generate all possible numbers in the range [0, n-1]
    nums = list(itertools.islice(itertools.count(), n))

    # Calculate the frequency of k in the range
    freq_k = nums.count(k)

    # Calculate the mean distance of k from other numbers in the range
    dists = np.abs(np.array(nums) - k)
    mean_dist = np.mean(dists)

    # Combine frequency and mean distance to create the priority
    return freq_k / n + mean_dist / (n - 1)
```

This version of `priority_v1` makes small changes to `priority_v0` by adding two new factors to the priority calculation: the frequency of `k` in the range and the mean distance of `k` from other numbers in the range. These factors help to prioritize numbers that are both common and central to the range.