Here's an improved version of `priority_v1` that considers the frequency of `k` in the range `[1, n]` and the number of multiples of `k` within that range. This version uses the `collections.Counter` to count the occurrences of `k` and its multiples.

```python
from collections import Counter

def priority_v1(k: int, n: int) -> float:
    """Improved version of `priority_v0`."""
    # Count occurrences of k and its multiples up to n
    counts = Counter(i for i in range(1, n + 1) if i % k == 0)
    return sum(counts.values()) / n  # Return the average count
```

This version of `priority_v1` should provide a better estimate of the priority for adding `k` to the Salem-Spencer set compared to `priority_v0`. It considers the frequency of `k` and its multiples, which should be more relevant for the Salem-Spencer problem.