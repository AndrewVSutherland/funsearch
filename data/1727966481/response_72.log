Here's an improved version of `priority_v1` that considers the frequency of `k` in all possible subsets of size `k` in the range `[1, n]`. This version uses the `itertools.combinations` function to generate all possible subsets and `np.mean` to calculate the average frequency.

```python
import itertools
import numpy as np

def priority_v1(k: int, n: int) -> float:
    """Improved version of `priority_v0`."""
    freq = np.mean([k in subset for subset in itertools.combinations(range(1, n + 1), k)])
    return freq
```

This version of `priority_v1` makes a small change from `priority_v0` by actually calculating a priority value based on the frequency of `k` in subsets of size `k`. The code is also kept short as requested.