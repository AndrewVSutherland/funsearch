Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`. This is a small change that should improve the priority function. I've also added some docstrings and type hints for better understanding.

```python
from typing import List

@funsearch.run
def priority_v1(k: int, n: int) -> float:
    """
    Returns the priority with which we want to add `k` to the Salem-Spencer set.
    n is the number of possible integers, and k is the integer we want to determine priority for.
    This version considers the number of unique remainders when dividing `k` by `n`.
    """
    remainders = set(k % i for i in range(1, n + 1))
    return len(remainders) / n
```

This function calculates the remainders of `k` when divided by all integers from 1 to `n`, and then returns the ratio of unique remainders to `n`. This ratio should be higher for numbers that are more likely to be part of a large Salem-Spencer progression, as they will have more unique remainders.