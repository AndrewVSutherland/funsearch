Here's an improved version of `priority_v1` that considers the frequency of `k` in the range `[1, n]` and the number of unique elements in that range. This version uses the `Counter` class from the `collections` module to count the occurrences of `k`.

```python
from collections import Counter

def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  # Count the occurrences of k in the range [1, n]
  count = sum(1 for i in range(1, n + 1) if i % k == 0)

  # Calculate the number of unique elements in the range [1, n]
  unique_elements = len(set(range(1, n + 1)))

  # Return the priority as the ratio of the count to the number of unique elements
  return count / unique_elements
```

This version of `priority_v1` makes a small change to `priority_v0` by introducing a simple frequency-based priority calculation. It considers the number of multiples of `k` in the range `[1, n]` and divides it by the total number of unique elements in that range. This should provide a better estimate of the priority for adding `k` to the Salem-Spencer set.

To further improve the function, you could consider additional factors, such as the distribution of multiples of `k` or the presence of other factors of `k` in the range. However, keep in mind the requirement to make only small changes and keep the code short.