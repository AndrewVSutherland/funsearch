Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`. This is a small change from `priority_v0` and should help improve the priority function.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  remainders = set((k + i) % n for i in range(n))
  return len(remainders) / n
```

This version calculates the set of unique remainders when adding each integer from 0 to `n-1` to `k` and dividing by `n`. The priority is then the ratio of the number of unique remainders to `n`. This should give a higher priority to numbers that can generate more unique remainders, which is a useful property for the Salem-Spencer set construction.