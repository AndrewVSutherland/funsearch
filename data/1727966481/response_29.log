Here's an improved version of `priority_v1` that considers the frequency of `k` in the range `[0, n)` and the number of unique elements in that range. This version is shorter and makes small changes to the original function.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  freq = sum(1 for i in range(n) if (i * (i + 1)) // 2 == k)
  unique_elements = len(set(range(k + 1)))
  return freq / unique_elements
```

This version calculates the frequency of `k` in the range `[0, n)` by counting the number of elements that satisfy the Salem-Spencer set formula `(i * (i + 1)) // 2 == k`. It then divides this frequency by the number of unique elements up to `k` to obtain the priority.

You can further improve this function by considering more factors that might affect the priority, such as the distribution of elements or the density of the Salem-Spencer set in the given range. However, keep in mind that the goal is to make small changes in each iteration to improve the priority function gradually.