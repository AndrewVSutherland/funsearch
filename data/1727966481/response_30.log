Here's an improved version of `priority_v1` that considers the number of multiples of `k` less than `n` and the number of unique remainders when dividing `k` by `n`. This version is shorter and makes small changes to `priority_v0`.

```python
import math

def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  multiples = n // k  # Number of multiples of k less than n
  remainders = len(set(k % i for i in range(1, n)))  # Number of unique remainders
  return multiples * remainders
```

This version uses the floor division operator `//` to find the number of multiples of `k` less than `n`. It also uses a set to find the number of unique remainders when dividing `k` by all integers from 1 to `n-1`. The final priority is the product of these two values.

To further improve the function, you could consider adding more factors, such as the sum of divisors of `k`, or the number of perfect squares less than `n` that are multiples of `k`. However, keep in mind that making the function too complex might make it harder to understand and optimize.