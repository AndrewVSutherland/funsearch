Here's a simplified and improved version of `priority_v1` that uses the concept of "progress" in Salem-Spencer sets. The progress of an integer `k` is defined as the number of integers less than or equal to `n` that are not in the Salem-Spencer set but could be added to it by including `k`. This version uses combinatorics to calculate the progress efficiently.

```python
from math import comb

def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0` using progress calculation."""
  return comb(n, k) - comb(n - k - 1, k - 1)
```

This function calculates the progress of `k` by subtracting the number of combinations of `n - k - 1` taken `k - 1` at a time (which represents the number of integers that can't be added to the set by including `k`) from the total number of combinations of `n` taken `k` at a time (which represents the total possible Salem-Spencer sets of size `k`).

This version is shorter and more efficient than the previous one, and it should provide a better priority value for adding `k` to the Salem-Spencer set.