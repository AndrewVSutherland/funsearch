def priority_v1(el: tuple[int, ...], n: int) -> float:
    return sum(el) / n

@funsearch.run
def priority_v2(el: tuple[int, ...], n: int) -> float:
    return sum(el) / n + np.var(el)

@funsearch.run
def priority_v3(el: tuple[int, ...], n: int) -> float:
    return sum(el) / n + np.var(el) - sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] == el[j] == 1)

@funsearch.run
def priority_v4(el: tuple[int, ...], n: int) -> float:
    return sum(el) / n + np.var(el) - sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] == el[j] == 1) + sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] == el[j] == 2)

@funsearch.run
def priority_v5(el: tuple[int, ...], n: int) -> float:
    return sum(el) / n + np.var(el) - sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] == el[j] == 1) + sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] == el[j] == 2) - sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] != el[j])

@funsearch.run
def priority_v6(el: tuple[int, ...], n: int) -> float:
    return sum(el) / n + np.var(el) - sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] == el[j] == 1) + sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] == el[j] == 2) - sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] != el[j]) + sum(1 for i, j, k in itertools.combinations(range(n), 3) if el[i] == el[j] == el[k])

@funsearch.run
def priority_v7(el: tuple[int, ...], n: int) -> float:
    return sum(el) / n + np.var(el) - sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] == el[j] == 1) + sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] == el[j] == 2) - sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] != el[j]) + sum(1 for i, j, k in itertools.combinations(range(n), 3) if el[i] == el[j] == el[k]) - sum(1 for i, j, k, l in itertools.combinations(range(n), 4) if el[i] == el[j] == el[k] == el[l])

@funsearch.run
def priority_v8(el: tuple[int, ...], n: int) -> float:
    return sum(el) / n + np.var(el) - sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] == el[j] == 1) + sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] == el[j] == 2) - sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] != el[j]) + sum(1 for i, j, k in itertools.combinations(range(n), 3) if el[i] == el[j] == el[k]) - sum(1 for i, j, k, l in itertools.combinations(range(n), 4) if el[i] == el[j] == el[k] == el[l]) + sum(1 for i, j, k, l, m in itertools.combinations(range(n), 5) if el[i] == el[j] == el[k] == el[l] == el[m])

@funsearch.run
def priority_v9(el: tuple[int, ...], n: int) -> float:
    return sum(el) / n + np.var(el) - sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] == el[j] == 1) + sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] == el[j] == 2) - sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] != el[j]) + sum(1 for i, j, k in itertools.combinations(range(n), 3) if el[i] == el[j] == el[k]) - sum(1 for i, j, k, l in itertools.combinations(range(n), 4) if el[i] == el[j] == el[k] == el[l]) + sum(1 for i, j, k, l, m in itertools.combinations(range(n), 5) if el[i] == el[j] == el[k] == el[l] == el[m]) - sum(1 for i, j, k, l, m, n in itertools.combinations(range(n), 6) if el[i] == el[j] == el[k] == el[l] == el[m] == el[n])

@funsearch.run
def priority_v10(el: tuple[int, ...], n: int) -> float:
    return sum(el) / n + np.var(el) - sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] == el[j] == 1) + sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] == el[j] == 2) - sum(1 for i, j in itertools.combinations(range(n), 2) if el[i] != el[j]) + sum(1 for i, j, k in itertools.combinations(range(n), 3) if el[i] == el[j] == el[k]) - sum(1 for i, j, k, l in itertools.combinations(range(n), 4) if el[i] == el[j] == el[k] == el[l]) + sum(1 for i, j, k, l, m in itertools.combinations(range(n), 5) if el[i] == el[j] == el[k] == el[l] == el[m]) - sum(1 for i, j, k, l, m, n in itertools.combinations(range(n), 6) if el[i] == el[j] == el[k] == el[l] == el[m] == el[n]) + sum(1 for i, j, k, l, m, n, o in itertools.combinations(range(n), 7) if el[i] == el[j] == el[k] == el[l] == el[m] == el[n] == el[o])