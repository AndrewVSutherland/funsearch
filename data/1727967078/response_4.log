Here's an improved version of `priority_v1` that uses the concept of "missing numbers" in the Salem-Spencer set. This version considers the number of missing integers between 1 and `n` that are not in the set `{1, 2, ..., k}`.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0` using missing numbers concept."""
  return n - sum(range(1, k + 1))
```

This version makes a small change from `priority_v0` by returning the number of missing integers instead of 0.0. The smaller the number of missing integers, the higher the priority to add `k` to the set.

Here's a slightly shorter version using list comprehension:

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0` using missing numbers concept (shorter)."""
  return n - len([i for i in range(1, k + 1) if i > n])
```

Both versions have the same functionality but with a slight improvement over `priority_v0`. To further improve the priority function, you might want to consider other factors like the distribution of missing numbers or the growth rate of the Salem-Spencer set.