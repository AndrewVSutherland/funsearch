Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`. This is a small change from `priority_v0`, but it should improve the priority calculation for Salem-Spencer sets.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  remainders = set((k % i) for i in range(1, n + 1))
  return len(remainders) / n
```

This version calculates the priority by dividing the number of unique remainders by `n`. This should give a higher priority to numbers that have more unique remainders, as these are more likely to contribute to a Salem-Spencer set with a large progress.