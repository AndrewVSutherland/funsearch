Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`, as well as the number of multiples of `k` within the range `[0, n)`. This version is shorter and makes small changes to `priority_v0`.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  remainders = set((k % i) for i in range(1, n + 1))
  multiples = sum(i for i in range(0, n, k))
  return len(remainders) * multiples
```

This version uses a set to count unique remainders, which is more efficient than using a list. It also calculates the number of multiples of `k` within the range `[0, n)` using a generator expression and the `sum()` function, which is more concise than using a loop. The priority is then calculated as the product of the number of unique remainders and the number of multiples, which is a small change from `priority_v0`.