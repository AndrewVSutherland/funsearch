Here's an improved version of `priority_v1` that considers the frequency of `k` in the range `[1, n]` and the number of remaining elements to be added to the Salem-Spencer set. I've made small changes to keep the code short and efficient.

```python
from collections import Counter

@funsearch.run
def priority_v1(k: int, n: int) -> float:
    """Returns the priority with which we want to add `k` to the Salem-Spencer set."""
    freq = Counter(range(1, n + 1)).get(k, 0)
    remaining = n - len(set(range(1, n + 1)) - {k})
    return freq / remaining
```

This version of `priority_v1` calculates the frequency of `k` in the range `[1, n]` using `Counter` and then divides it by the number of remaining elements to be added to the set. This should improve the priority calculation compared to `priority_v0`.