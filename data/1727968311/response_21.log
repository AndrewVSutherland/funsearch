Here's an improved version of `priority_v1` and `priority_v2` that considers the number of unique remainders when dividing `k` by `n`, and the number of multiples of `k` within the range `[0, n)`. These metrics can help determine the priority of adding `k` to the Salem-Spencer set.

```python
import math

@funsearch.run
def priority_v1(k: int, n: int) -> float:
    """Improved version of `priority_v0`."""
    remainders = set(k % i for i in range(1, n + 1))
    multiples = sum(i for i in range(0, n, k))
    return len(remainders) * multiples

def priority_v2(k: int, n: int) -> float:
    """Improved version of `priority_v1`."""
    remainders = set(k % i for i in range(1, n + 1))
    multiples = sum(i for i in range(0, n, k))
    return len(remainders) * multiples * math.log(n / k)
```

In `priority_v2`, I've added the logarithm factor to give more priority to smaller numbers, as they are more likely to be part of a large Salem-Spencer progression.