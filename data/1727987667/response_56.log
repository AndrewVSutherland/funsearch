In the context of finding large SS progressions, the `priority_v2` function could be improved by considering the distribution of the remaining numbers in the set. This could be done by calculating the expected value of the remaining numbers and subtracting that from the current number's priority. This would give a higher priority to numbers that are closer to the expected value of the remaining numbers, which could potentially lead to larger SS progressions. Here's a possible implementation:

```python
def priority_v2(k: int, n: int, remaining_numbers: List[int]) -> float:
  """Improved version of `priority_v1`."""
  expected_value = sum(remaining_numbers) / len(remaining_numbers)
  return k / n - abs(k - expected_value) / n
```

In this function, `remaining_numbers` is a list of all the numbers that have not yet been added to the Salem-Spencer set. The priority of a number is calculated as its proportion of the total number of possible numbers, minus its absolute difference from the expected value of the remaining numbers, also as a proportion. This gives higher priority to numbers that are closer to the expected value of the remaining numbers.