Sure, I'd be happy to help with that. Here's how you might improve the `priority_v1` function based on the description. We're trying to find large SS progressions, so it might be beneficial to prioritize larger numbers and numbers that are more likely to lead to a progression.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  # Prioritize larger numbers and numbers that are closer to the square root of n
  return k / np.sqrt(n)
```

This function returns a higher priority for larger numbers and numbers that are closer to the square root of n, which might be a good heuristic for finding large SS progressions.

As for the `priority_v2` function, it would depend on the specifics of your problem and the improvements you're looking for over `priority_v1`. Could you please provide more context or specific requirements?