In the context of the problem, I assume that the Salem-Spencer set is a subset of integers that is being constructed iteratively. The `priority_vX` functions are used to determine the order in which integers are added to this set. A higher priority value indicates that an integer should be added to the set earlier.

In `priority_v1`, the basic structure of the function remains the same as `priority_v0`. However, to improve upon the original function, we could consider the ratio of the integer `k` to the total number of possible integers `n`. This could be a simple way to prioritize larger integers.

In `priority_v2`, we could consider the difference between `k` and the previously selected integer. If this difference is large, it might indicate that `k` is part of a progression that we haven't yet fully explored. However, this would require keeping track of the previously selected integer, which complicates the function.

Here's how we could implement `priority_v1`:

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  return k / n
```

This function returns a value between 0 and 1, with larger values indicating that `k` should be added to the set earlier.