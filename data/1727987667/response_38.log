def priority_v2(k: int, n: int) -> float:
  """Improved version of `priority_v1`.

  The priority is based on the size of the gap between the largest number in the Salem-Spencer set and `k`.
  Larger gaps are preferred, as they increase the likelihood of finding a large progression.
  """
  if not hasattr(priority_v2, 'ss_set'):
    priority_v2.ss_set = set()

  max_ss_set = max(priority_v2.ss_set) if priority_v2.ss_set else 0
  gap = k - max_ss_set

  return gap / n


def find_large_ss_progressions(n: int, length: int, max_gap: int) -> list[tuple[int, ...]]:
  """Finds large Salem-Spencer progressions of length `length` with a gap of at most `max_gap`.

  Args:
    n: The maximum integer to consider.
    length: The length of the progressions to find.
    max_gap: The maximum gap between consecutive elements in the progressions.

  Returns:
    A list of tuples, where each tuple represents a found progression.
  """
  ss_set = set()
  progressions = []

  for k in range(1, n + 1):
    if priority_v2(k, n) > 0:
      ss_set.add(k)

      if len(ss_set) >= length:
        min_ss_set = min(ss_set)

        if k - min_ss_set <= max_gap:
          progressions.append(tuple(sorted(ss_set)))

        ss_set.remove(min_ss_set)

  return progressions