Here's an improved version of `priority_v0` which considers the order of numbers in the progression:

```python
def priority_v1(k: int, n: int, progression: tuple) -> float:
  """Returns the priority with which we want to add `k` to the Salem-Spencer set.
  n is the number of possible integers, and k is the integer we want to determine priority for.
  progression is the current Salem-Spencer set progression.
  """
  if not progression:
    # If the progression is empty, we prioritize larger numbers
    return k / n
  else:
    # If the progression is not empty, we prioritize numbers that form a larger gap with the last number in the progression
    return (k - progression[-1]) / n
```

This version of the function will prioritize larger numbers when the progression is empty, and then prioritize numbers that form a larger gap with the last number in the progression. This should help to find larger Salem-Spencer progressions.