"""Finds large SS progressions 

On every iteration, improve priority_v1 over the priority_vX methods from previous iterations.
Make only small changes.
Try to make the code short.
"""
import itertools

import numpy as np

import funsearch


@funsearch.run
def priority_v0(k: int, n: int) -> float:
  """Returns the priority with which we want to add `element` to the salem-spencer set.
  n is the number of possible integers, and k is the integer we want to determine priority for. 
  """
  """Returns the priority that we want to add `k` to the Salem-Spencer set.
  `n` is the number of possible integers, and `k` is the integer for which we want to determine the priority.
  """
  # The priority is the ratio of the product of the two largest numbers less than k
  # to the total number of possible pairs (n^2), where n is the total number of possible integers.

  if k < 2:
    return 0.0

  largest_numbers = sorted([i for i in range(1, k)], reverse=True)[:2]
  priority = np.prod(largest_numbers) / (n ** 2)

  return priority


def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  """Improved version of `priority_v0`."""
  # Return the priority as the ratio of k to n
  return k / n


def priority_v2(k: int, n: int) -> float:
  """Improved version of `priority_v1`."""

