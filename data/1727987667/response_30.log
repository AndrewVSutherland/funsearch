This is a continuation of a code that finds large Salem-Spencer progressions. The function `priority_v0` currently returns a priority of 0.0 for any integer `k` from a set of `n` possible integers. For this task, I will improve `priority_v0` to `priority_v1` and `priority_v2` by introducing a simple scoring mechanism.

Firstly, I'll calculate the absolute difference between `k` and `n//2` (the middle integer in the set) and return it as the priority. This measures the distance of `k` from the center of the set, which might be a reasonable measure of its importance when searching for progressions.

Next, I'll modify the scoring mechanism to also take into account the size of the set `n`. I'll divide the absolute difference by `n`. This way, the priority will be a value between 0 and 1, and it will be less important to consider numbers that are far from the center of the set when `n` is large.

Here's the Python code that implements these improvements:

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  return float(abs(k - n // 2))

def priority_v2(k: int, n: int) -> float:
  """Improved version of `priority_v1`."""
  return abs(k - n // 2) / n
```

Note that `priority_v2` is more sophisticated and flexible than `priority_v1`, as it allows us to adjust the importance of the distance from the center based on the size of the set. However, `priority_v1` may be more suitable if we want to give a constant priority to the distance from the center, regardless of the size of the set.