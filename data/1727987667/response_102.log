def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`.
  Calculates the priority based on the ratio of the logarithm of `k` to the logarithm of `n`.
  """
  return np.log(k) / np.log(n)


def find_large_ss_progressions(max_int: int, set_size: int) -> list:
  """Finds large Salem-Spencer progressions.
  Args:
    max_int: The maximum integer to consider.
    set_size: The size of the Salem-Spencer set to find.
  Returns:
    A list of the largest Salem-Spencer progressions found.
  """
  ss_set = []
  for k in range(2, max_int + 1):
    if len(ss_set) >= set_size:
      break
    if priority_v1(k, max_int) >= priority_v1(ss_set[-1], max_int):
      ss_set.append(k)
  return ss_set


def main():
  max_int = 10000
  set_size = 10
  ss_progressions = find_large_ss_progressions(max_int, set_size)
  print(f"The largest Salem-Spencer progressions of size {set_size} are: {ss_progressions}")


if __name__ == "__main__":
  main()