To improve the `priority_v1` function over `priority_v0`, we can consider the distribution of the integers in the set and how their positions affect the overall priority. One possible improvement could be to weigh the priority based on the position of the integer in the set.

Here's an improved version of `priority_v1`:

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  position = k / n
  return position * (1 - position)
```

In this version, we multiply the position of the integer (`k / n`) by its complement (`1 - position`). This gives higher priority to integers that are closer to the middle of the set.

The `priority_v2` function can be further improved by considering additional factors such as the frequency of occurrence of the integers in the set or the gap between consecutive integers in the set. However, making small changes and keeping the code short is the priority.