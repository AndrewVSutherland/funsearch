Here's a possible improvement over `priority_v0`. This version takes into account the number of factors of `k` and `n` to calculate the priority. The more factors a number has, the less priority it gets, as it's easier to find a number with many factors.

```python
import math

def factor_count(n):
    """Returns the number of factors of `n`."""
    count = 0
    for i in range(1, int(math.sqrt(n)) + 1):
        if n % i == 0:
            if n / i == i:
                count += 1
            else:
                count += 2
    return count

def priority_v1(k: int, n: int) -> float:
    """Returns the priority with which we want to add `element` to the salem-spencer set.
    n is the number of possible integers, and k is the integer we want to determine priority for.
    """
    return k / (n * factor_count(k))
```

This version of the function should give a better priority to numbers that are more likely to form a large SS progression, that is, numbers with fewer factors.