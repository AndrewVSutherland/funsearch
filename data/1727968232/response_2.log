Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`. This is a small change from `priority_v0`, but it should improve the priority function.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  remainders = set((k + i) % n for i in range(n))
  return len(remainders) / n
```

This version calculates the number of unique remainders when adding each integer from 0 to `n-1` to `k` and dividing by `n`. The result is then normalized by dividing by `n` to get a value between 0 and 1. This should give a higher priority to integers that result in more unique remainders, which is a property of good Salem-Spencer sets.