Here's an improved version of `priority_v1` that considers the frequency of `k` in the range `[1, n]` and the number of elements already in the Salem-Spencer set. This version uses the `itertools` library to count the occurrences of `k` and the `numpy` library to calculate the mean of the existing set.

```python
import itertools
import numpy as np

def priority_v1(k: int, n: int, existing_set: set) -> float:
  """Improved version of `priority_v0`."""
  count_k = sum(1 for _ in itertools.islice(itertools.count(1), k - 1, n))
  mean_existing_set = np.mean(existing_set) if existing_set else 0
  return count_k / n + abs(k - mean_existing_set) / (n - 1)
```

This version of `priority_v1` makes small improvements over `priority_v0` by considering the frequency of `k` and the distance of `k` from the mean of the existing set. The priority is now a combination of these two factors, with the frequency of `k` and the distance from the mean being weighted equally.