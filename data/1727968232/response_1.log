Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`, and the number of multiples of `k` within the range `[1, n]`. This version is shorter and makes small changes to `priority_v0`.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  remainders = set(k % i for i in range(1, n + 1))
  multiples = sum(i % k == 0 for i in range(1, n + 1))
  return len(remainders) + multiples
```

This version uses a set to store unique remainders, which automatically removes duplicates and provides constant-time lookup. It also uses a generator expression with the `sum` function to count the number of multiples of `k` within the range `[1, n]`. The priority is then calculated as the sum of the number of unique remainders and multiples of `k`.

To further improve the function, you could consider adding more factors that contribute to the priority, such as the number of factors of `k`, or the sum of digits of `k`. However, keep in mind that the goal is to make small changes on each iteration, so don't introduce too many changes at once.