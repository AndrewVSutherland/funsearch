Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`. This is based on the idea that elements with more unique remainders are more likely to help grow the Salem-Spencer set. I've also added a small change to `priority_v0` to make it a valid baseline.

```python
@funsearch.run
def priority_v0(k: int, n: int) -> float:
    """Returns a basic priority based on the number of unique digits in `k`."""
    return len(set(str(k)))

def priority_v1(k: int, n: int) -> float:
    """Improved version of `priority_v0` that considers unique remainders when dividing `k` by `n`."""
    remainders = set(k % i for i in range(1, n + 1))
    return len(remainders) + 0.1 * priority_v0(k, n)  # Small improvement over priority_v0
```

In this version, `priority_v1` first calculates the set of unique remainders when dividing `k` by all numbers from 1 to `n`. It then returns the size of this set plus a small fraction (10%) of the priority calculated by `priority_v0`. This way, `priority_v1` builds upon the improvements from `priority_v0` while introducing a new factor to consider.