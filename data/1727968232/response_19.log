Here's an improved version of `priority_v1` that considers the complement of `k` in the Salem-Spencer set. It uses the fact that the Salem-Spencer set is symmetric around the midpoint of the interval `[1, n]`. The priority is calculated as the sum of the distances of `k` and its complement `n - k + 1` from the midpoint `n/2 + 1`.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  midpoint = n // 2 + 1
  return abs(k - midpoint) + abs(n - k + 1 - midpoint)
```

To further improve the function, we can consider the number of elements in the Salem-Spencer set that are less than or equal to `k`. This can be calculated using the formula `floor((sqrt(8*n + 1) - 1) / 2)`. The priority can then be adjusted based on the ratio of `k` to this value.

```python
import math

def priority_v2(k: int, n: int) -> float:
  """Further improved version of `priority_v1`."""
  midpoint = n // 2 + 1
  ss_size = math.floor((math.sqrt(8*n + 1) - 1) / 2)
  ratio = k / ss_size
  return abs(k - midpoint) + abs(n - k + 1 - midpoint) + ratio
```

To make the code short, we can use a lambda function for `priority_v2`:

```python
priority_v2 = lambda k, n: abs(k - (n // 2 + 1)) + abs(n - k + 1 - (n // 2 + 1)) + k / math.floor((math.sqrt(8*n + 1) - 1) / 2)
```

This version of the function should provide a better priority for adding elements to the Salem-Spencer set.