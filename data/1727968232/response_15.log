Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`. This is inspired by the Salem-Spencer problem, where we're interested in the distribution of remainders. The priority is calculated as the sum of the reciprocals of these unique remainders.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  remainders = set(k % i for i in range(1, n+1))
  return sum(1 / r for r in remainders)
```

To keep the code short and make small changes, I've used a generator expression inside the `set` function to create a set of unique remainders. Then, I've used a generator expression inside the `sum` function to calculate the sum of the reciprocals of these remainders.

Here's a comparison of the two functions using the `@funsearch.run` decorator:

```python
@funsearch.run
def test_priority_v0():
  assert priority_v0(5, 10) == 0.0

@funsearch.run
def test_priority_v1():
  assert priority_v1(5, 10) == 0.25
```