Here's an improved version of `priority_v0` that prioritizes larger integers and favors numbers closer to `n/2`.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`.
  Prioritizes larger integers and favors numbers closer to `n/2`.
  """
  mid = n / 2
  return k + 1 / abs(k - mid)
```

This function returns larger values for larger `k` and for `k` closer to `n/2`. The addition of `k` favors larger integers, and the fraction `1 / abs(k - mid)` favors numbers closer to the middle of the range.

Note that this function assumes that `n` is positive and that `k` is an integer between 1 and `n`. If these assumptions are not met, the function may not work correctly.

This function does not handle the case where `k` is equal to `n/2` correctly. If `n` is even, there are two middle numbers, and the function will return a higher priority for the smaller of the two. If this is not desired, the function could be modified to handle this case separately.