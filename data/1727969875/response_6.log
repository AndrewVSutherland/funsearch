In a progression like Salem-Spencer, the priority of an integer `k` is often determined by its relationship with the previously selected integers in the sequence. Since there's no context provided about the Salem-Spencer sequence or the previously selected integers, it's difficult to suggest a specific improvement over `priority_v0`. However, I can provide a basic example of how you might prioritize integers based on their distance to the previously selected integers.

Here, the priority is calculated as the average distance of `k` to all currently selected integers in the sequence. The larger this distance, the higher the priority.

```python
def priority_v1(k: int, sequence: list) -> float:
    """Improved version of `priority_v0`."""
    if not sequence:
        return 0.0  # If sequence is empty, priority is 0
    else:
        return np.mean([abs(k - i) for i in sequence])  # Calculate average distance
```

This function takes an additional argument `sequence`, which is a list of previously selected integers in the Salem-Spencer sequence. It calculates the priority of `k` based on its average distance from all integers in the `sequence`.

Please note that this is a simple example and might not be the most effective way to prioritize integers for a Salem-Spencer sequence. The best priority function would depend on the specific properties and requirements of the Salem-Spencer sequence.