Here is an improved version of `priority_v0` to `priority_v1`. This version takes into account the fact that larger numbers are likely to lead to larger progressions, so it returns the square of the number as the priority:

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  return k ** 2
```

This version assumes that the numbers to be considered are non-negative. If that's not the case, you might want to consider using the absolute value of `k` instead:

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  return abs(k) ** 2
```

These changes are small but they should improve the performance of your `funsearch` function, as it will now prefer larger numbers when adding elements to the Salem-Spencer set.