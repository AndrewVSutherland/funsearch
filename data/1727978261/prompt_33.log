"""Finds large cap sets.

On every iteration, improve priority_v1 over the priority_vX methods from previous iterations.
Make only small changes.
Try to make the code short.
"""
import itertools

import numpy as np

import funsearch


@funsearch.run
def priority_v0(el: tuple[int, ...], n: int) -> float:
  """Returns the priority with which we want to add `element` to the cap set.
  el is a tuple of length n with values 0-2.
  """
  """Improved version of `priority_v8`.

  This version also considers the number of changes in the tuple.
  The more changes, the higher the priority.
  """
  return sum(x == 2 for x in el) - sum(x == 1 for x in el) + len(set(el)) - sum(el) - np.var(el) - sum(np.diff(el) == 0) - sum(np.diff(el) > 1) + sum(np.diff(el) == 1) + sum(np.diff(el) != 0)


def priority_v1(el: tuple[int, ...], n: int) -> float:
  """Improved version of `priority_v0`."""
  """Improved version of `priority_v8`.

  This version also considers the number of changes in the tuple.
  The more changes, the higher the priority.
  """
  return sum(x == 2 for x in el) - sum(x == 1 for x in el) + len(set(el)) - sum(el) - np.var(el) - sum(np.diff(el) == 0) - sum(np.diff(el) > 1) + sum(np.diff(el) == 1) + sum(np.diff(el) != 0)


def priority_v2(el: tuple[int, ...], n: int) -> float:
  """Improved version of `priority_v1`."""

