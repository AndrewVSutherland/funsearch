Here's an improved version of `priority_v1` with a small change to reduce the number of iterations in the loop and use a generator expression for better performance:

```python
def priority_v2(k: int, n: int) -> float:
  """Improved version of `priority_v1`."""
  remainders = set((k * i) % n for i in range(1, n + 1))
  multiples = sum(1 for i in range(1, int(n / k) + 1) if (k * i) % n == 0)
  return len(remainders) / n + multiples / n
```

In this version, I've changed the range for `multiples` to go up to `int(n / k) + 1` instead of `n + 1`. This is because if `k` is a factor of `n`, the loop will iterate more than necessary. By dividing `n` by `k`, we ensure that we only iterate up to the maximum possible multiple of `k` that is less than or equal to `n`.