Here's an improved version of `priority_v1` that considers the frequency of `k` in the range `[0, n)` and the number of unique elements in that range. This version is shorter and makes a small change from `priority_v0`.

```python
from collections import Counter

def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  return (n - Counter(range(n)).get(k, 0)) / n
```

This version uses the `Counter` class from the `collections` module to count the frequency of `k` in the range `[0, n)`. If `k` is not in the range, `Counter` returns 0. The priority is then calculated as the number of unique elements minus the frequency of `k`, divided by `n`. This encourages adding elements that are less frequent in the range.