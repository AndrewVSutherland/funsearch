Here's an improved version of `priority_v1` that considers the frequency of `k` in the range `[1, n]` and the number of its divisors. This version is shorter and makes small changes to `priority_v0`.

```python
from math import isqrt

def priority_v1(k: int, n: int) -> float:
  """Returns the priority with which we want to add `k` to the Salem-Spencer set.
  n is the number of possible integers, and k is the integer we want to determine priority for.
  """
  # Frequency of k in [1, n]
  freq = sum(1 for i in range(1, n + 1) if i % k == 0)

  # Number of divisors of k
  num_divisors = sum(1 for i in range(1, isqrt(k) + 1) if k % i == 0) * 2 - (isqrt(k) ** 2 == k)

  return freq / n + num_divisors / k
```

This version of `priority_v1` uses the fact that the number of divisors of an integer `k` can be calculated by counting the number of factors up to the square root of `k` and then doubling that count (subtracting 1 if `k` is a perfect square). It also considers the frequency of `k` in the range `[1, n]` to give a higher priority to integers that appear more often in the range.

To further improve the function, you could consider other factors that might influence the priority, such as the sum of divisors or the number of distinct prime factors. However, keep in mind that the goal is to make small changes on each iteration, so don't introduce too many changes at once.