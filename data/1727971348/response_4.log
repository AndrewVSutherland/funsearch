Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n` and the number of multiples of `k` less than `n`. This version is shorter and makes small changes to `priority_v0`.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  remainders = set(k % d for d in range(1, n + 1))
  multiples = sum(1 for i in range(1, n // k + 1))
  return len(remainders) * multiples
```

This version uses a set to count unique remainders, which is more efficient than using a list. It also calculates the number of multiples of `k` less than `n` in a single line. The priority is then the product of the number of unique remainders and the number of multiples of `k`.