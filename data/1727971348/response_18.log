Here's an improved version of `priority_v1` that considers the number of elements less than `k` and the total number of elements in the Salem-Spencer set. This version uses the formula `n - k + 1` for the priority, which is a small change from `priority_v0`.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  return n - k + 1
```

To further improve the function, we can consider the number of elements greater than `k` as well. This can be done by using the formula `n - 2k + 1`, which is a small change from `priority_v1`.

```python
def priority_v2(k: int, n: int) -> float:
  """Further improved version of `priority_v1`."""
  return n - 2 * k + 1
```

To make the code shorter, we can use a lambda function for `priority_v2`.

```python
priority_v2 = lambda k, n: n - 2 * k + 1
```

To iterate through these functions and find the best one, you can use the following code:

```python
priority_versions = [priority_v0, priority_v1, priority_v2]
best_priority = max(priority_versions, key=lambda f: f(5, 10))
print(best_priority(5, 10))
```

This will output the priority value for `k = 5` and `n = 10` using the best version of the priority function found.