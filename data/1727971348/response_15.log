Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`. This is based on the idea that elements with more unique remainders could potentially generate more unique pairs in the Salem-Spencer set.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  remainders = set(k % i for i in range(1, n+1))
  return len(remainders) / n
```

This version makes a small change by introducing the concept of unique remainders. The priority is now calculated as the ratio of the number of unique remainders to `n`. This change should improve the priority function without making significant alterations to the original code.

To further improve the function, you could consider the frequency of each remainder as well, giving more priority to elements that have remainders that appear less frequently. Here's a possible version of `priority_v2`:

```python
from collections import Counter

def priority_v2(k: int, n: int) -> float:
  """Further improved version of `priority_v1`."""
  remainders = [k % i for i in range(1, n+1)]
  remainder_freq = Counter(remainders)
  return sum(1 / freq for freq in remainder_freq.values()) / n
```

This version uses the `Counter` class from the `collections` module to count the frequency of each remainder. The priority is then calculated as the average of the reciprocals of these frequencies, normalized by dividing by `n`. This change should provide an even better estimate of the priority for adding `k` to the Salem-Spencer set.