Here's an improved version of `priority_v1` that uses the concept of "missingness" from the Salem-Spencer problem. This version calculates the priority based on the number of missing integers between `k` and `n`, and the distance from `k` to `n`. The priority is higher for integers that are closer to `n` and have more missing integers.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  missing = n - k
  distance = n - k
  return missing * distance
```

To further improve the function, we can use the fact that the Salem-Spencer problem is a combinatorial optimization problem, and we can use a heuristic to estimate the priority. One such heuristic is to consider the number of ways to choose `k` elements from the first `n` integers, which can be calculated using the binomial coefficient `nCk`. The priority can then be calculated as the product of the missingness, distance, and the inverse of the binomial coefficient.

```python
from math import comb

def priority_v2(k: int, n: int) -> float:
  """Further improved version of `priority_v1` using a heuristic."""
  missing = n - k
  distance = n - k
  heuristic = 1 / comb(n, k)
  return missing * distance * heuristic
```

To find large Salem-Spencer progressions, we can use the `itertools.combinations` function to generate all possible subsets of size `k` from the first `n` integers, and then filter the subsets based on the priority calculated using `priority_v2`. Here's an example of how to do this:

```python
def find_large_ss_progressions(k: int, n: int, max_progressions: int = 10) -> list[tuple[int, ...]]:
  progressions = []
  for combination in itertools.combinations(range(1, n + 1), k):
    priority = priority_v2(k, n)
    progressions.append((priority, combination))
    if len(progressions) > max_progressions:
      progressions.sort(reverse=True)
      progressions = progressions[:max_progressions]
  progressions.sort(reverse=True)
  return [progression[1] for progression in progressions]
```

This function returns a list of the top `max_progressions` Salem-Spencer progressions of size `k` from the first `n` integers, based on the priority calculated using `priority_v2`. The progressions are sorted in descending order of priority.