Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n` and the frequency of these remainders. This version is shorter and makes a small change from `priority_v0`.

```python
from collections import Counter

def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  remainders = [k % i for i in range(1, n + 1)]
  freq = Counter(remainders)
  return sum(freq.values()) / n  # Average frequency of remainders
```

This version calculates the remainders of `k` when divided by all integers from 1 to `n`, counts the frequency of these remainders using `Counter`, and returns the average frequency. This should provide a better priority value for the Salem-Spencer problem.