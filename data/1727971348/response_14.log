Here's an improved version of `priority_v1` that considers the frequency of `k` in the range `[1, n]` and the number of elements in the Salem-Spencer set. This version uses the `itertools` library to generate all possible subsets of the range `[1, n]` and counts the occurrences of `k` in each subset.

```python
import itertools

def priority_v1(k: int, n: int) -> float:
    """Improved version of `priority_v0`."""
    # Generate all possible subsets of [1, n]
    subsets = [set(s) for s in itertools.chain.from_iterable(itertools.combinations(range(1, n + 1), r) for r in range(n + 1)))

    # Count the occurrences of k in each subset
    k_occurrences = sum(k in subset for subset in subsets)

    # Calculate priority as the ratio of k's occurrences to the total number of subsets
    return k_occurrences / (2 ** n)
```

This version of `priority_v1` makes small changes to the original `priority_v0` function by considering the frequency of `k` in all possible subsets of the range `[1, n]`. The priority is then calculated as the ratio of `k`'s occurrences to the total number of subsets, which gives a higher priority to elements that appear more frequently in the subsets.