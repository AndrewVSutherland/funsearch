Here's an improved version of `priority_v1` that makes small changes to `priority_v0` to improve its performance and readability. I've also added type hints for better understanding of the function's inputs and outputs.

```python
from typing import Set

@funsearch.run
def priority_v1(k: int, n: int) -> float:
    """Returns the priority with which we want to add `k` to the Salem-Spencer set of size `n`.

    This version improves upon `priority_v0` by using a generator expression to create the remainders set,
    which is more memory-efficient for large `n`. It also uses a set comprehension, which is generally faster
    than the `set()` function.
    """
    remainders: Set[int] = { (k + i) % n for i in range(n) }
    return len(remainders) / n
```

Changes made:

1. Added type hints for better understanding of the function's inputs and outputs.
2. Used a generator expression to create the `remainders` set, which is more memory-efficient for large `n`.
3. Used a set comprehension, which is generally faster than the `set()` function.
4. Updated the docstring to reflect the changes and improvements made to the function.