Here's an improved version of `priority_v1` that considers the frequency of multiples of `k` up to `n` and also the frequency of multiples of `k` up to `n//k`. This should give a better estimate of the priority for adding `k` to the Salem-Spencer set.

```python
def priority_v2(k: int, n: int) -> float:
  """Improved version of `priority_v1`."""
  freq_k = np.count_nonzero(np.arange(n) % k == 0)
  freq_kk = np.count_nonzero(np.arange(n // k) % k == 0)
  return (freq_k + freq_kk) / n
```

To further improve the function, we can consider the frequency of multiples of `k` up to `n` that are not multiples of `k^2`. This can be done by subtracting the frequency of multiples of `k^2` from the frequency of multiples of `k`.

```python
def priority_v3(k: int, n: int) -> float:
  """Improved version of `priority_v2`."""
  freq_k = np.count_nonzero(np.arange(n) % k == 0)
  freq_kk = np.count_nonzero(np.arange(n // k) % k == 0)
  freq_kkk = np.count_nonzero(np.arange(n // k**2) % k == 0)
  return (freq_k + freq_kk - freq_kkk) / n
```

This version of the function should provide an even better estimate of the priority for adding `k` to the Salem-Spencer set.