Here's an improved version of `priority_v2` with a slight modification to incorporate the growth rate's exponential decay and make the code shorter:

```python
def priority_v2(k: int, n: int) -> float:
  frequency = sum(1 for i in range(n) if i == k)
  growth_rate = (frequency - sum(1 for i in range(k) if i == k - 1)) / (k - (k - 1))
  decay_factor = 0.9
  return frequency / n + decay_factor * (1 - decay_factor) * growth_rate
```

Now, let's create a function to find large Salem-Spencer progressions using these priority functions:

```python
def find_large_ss_progressions(n: int, k_max: int, priority_func: callable) -> list:
  progressions = []
  for k in range(1, k_max + 1):
    priority = priority_func(k, n)
    if priority > 0.5:  # You can adjust the threshold as needed
      progressions.append(k)
  return progressions
```

You can use this function with any of the priority functions like this:

```python
progressions = find_large_ss_progressions(n=100, k_max=50, priority_func=priority_v2)
print(progressions)
```