Here's an improved version of `priority_v1` that considers the number of unique remainders and also takes into account the frequency of each remainder. This version uses the `Counter` class from the `collections` module to count the occurrences of each remainder.

```python
from collections import Counter

def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  remainders = [(k + i) % n for i in range(n)]
  count = Counter(remainders)
  return sum(count.values()) / n
```

This version of `priority_v1` should provide a better estimate of the priority for adding `k` to the Salem-Spencer set, as it considers both the number of unique remainders and their frequencies. It also keeps the code short and only makes small changes compared to the previous version.