Here's an improved version of `priority_v1` that considers the frequency of remainders instead of just their count. This version uses `np.bincount` to efficiently count the occurrences of remainders and returns the average frequency. I've also made the code shorter by using list comprehension and the `sum` function.

```python
import numpy as np

def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  remainders = [(k + i) % n for i in range(n)]
  frequencies = np.bincount(remainders)
  return sum(frequencies) / n
```

This version of `priority_v1` should provide a better estimate of the priority by considering the distribution of remainders. It's a small change from `priority_v0` but should improve the performance of the Salem-Spencer set construction.