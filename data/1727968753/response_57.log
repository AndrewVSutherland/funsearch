Here's an improved version of `priority_v1` that considers the number of unique remainders and the frequency of each remainder. This version uses `collections.Counter` to count the occurrences of each remainder and calculates the priority based on the entropy of the distribution.

```python
import collections
import math

@funsearch.run
def priority_v1(k: int, n: int) -> float:
    """Improved version of `priority_v0`."""
    remainders = [(k + i) % n for i in range(n)]
    count = collections.Counter(remainders)
    entropy = -sum(p * math.log2(p) for p in count.values() / n)
    return entropy
```

This version of `priority_v1` should provide a better estimate of the priority for adding `k` to the Salem-Spencer set by considering the diversity and frequency of the remainders. The entropy measure increases with the diversity of the remainders, giving higher priority to elements that distribute evenly among the possible remainders.