Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`. This is a small change that builds upon `priority_v0` and should make the code short.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  return len(set(k % i for i in range(1, n + 1)))
```

In this version, we calculate the remainders of `k` when divided by all integers from 1 to `n`, and then return the number of unique remainders. This should give a higher priority to numbers that have more unique remainders, which is a step towards finding large Salem-Spencer progressions.

You can further improve this function by considering more factors, such as the maximum remainder or the sum of remainders, but this version is a small change that builds upon `priority_v0` and should make the code short.