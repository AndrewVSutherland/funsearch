Here's an improved version of `priority_v2` that reduces the number of iterations and uses a single loop to calculate the frequencies. I've also made the code shorter by using list comprehensions and the `sum` function.

```python
def priority_v2(k: int, n: int) -> float:
    """Improved version of `priority_v1`."""
    freqs = [sum(i % j == 0 for i in range(n // j**p)) for p, j in enumerate([k, k**2, k**3, k**4])]
    return sum(freqs[:2]) - sum(freqs[1:3]) + freqs[-1] / n
```

This version calculates the frequencies for `k`, `k^2`, `k^3`, and `k^4` in a single loop and then uses a simple formula to calculate the priority. The code is shorter, and the performance should be improved due to the reduced number of iterations.