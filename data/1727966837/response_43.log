Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`. This metric can help identify large Salem-Spencer progressions. I've made small changes to keep the code short and maintain the spirit of improving the priority function iteratively.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  remainders = set((k + i) % n for i in range(n))
  return len(remainders) / n
```

This version calculates the priority as the ratio of unique remainders to `n`. The more unique remainders, the higher the priority, indicating a potentially larger Salem-Spencer progression.