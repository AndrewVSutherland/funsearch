Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`. This is a small change that builds upon `priority_v0` and should help improve the search for large Salem-Spencer progressions.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0` that considers the number of unique remainders."""
  remainders = set((k + i) % n for i in range(n))
  return len(remainders)
```

This version of `priority_v1` calculates the remainders of `k` when added to each integer from 0 to `n-1`, and then returns the number of unique remainders. This should give a higher priority to numbers that have a larger number of unique remainders, as these are more likely to be part of a large Salem-Spencer progression.