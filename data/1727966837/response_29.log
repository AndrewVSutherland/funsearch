Here's an improved version of `priority_v1` that considers the frequency of `k` in the range `[1, n]` and the average frequency of its neighbors. This version also uses numpy for efficient computations.

```python
import numpy as np

def priority_v1(k: int, n: int) -> float:
    """Improved version of `priority_v0`."""
    freq = np.bincount(np.arange(1, n + 1))  # Frequency of each integer in [1, n]
    freq_k = freq[k - 1]  # Frequency of k
    avg_neighbors = np.mean(freq[k - 2:k] + freq[k:k + 2])  # Average frequency of neighbors

    return freq_k + avg_neighbors
```

This version of `priority_v1` makes small changes to `priority_v0` by considering the frequency of `k` and the average frequency of its neighbors. It also uses numpy for efficient computations, making the code shorter and more performant.