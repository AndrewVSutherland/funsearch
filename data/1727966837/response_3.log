Here's an improved version of `priority_v1` that considers the frequency of `k` in the range `[0, n)` and the number of remaining elements that are greater than `k`. This version also uses the `itertools.combinations` function to generate all possible subsets of size `k` from the range `[0, n)`.

```python
from collections import Counter
import itertools

def priority_v1(k: int, n: int) -> float:
    """Improved version of `priority_v0`."""
    # Count the frequency of each element in the range [0, n)
    freq = Counter(range(n))
    # Generate all possible subsets of size k
    subsets = list(itertools.combinations(range(n), k))
    # Calculate the priority as the sum of frequencies of elements in all subsets
    priority = sum(freq[elem] for subset in subsets for elem in subset)
    # Subtract the frequency of k to avoid counting it multiple times
    priority -= freq[k]
    # Add the number of remaining elements greater than k to the priority
    priority += n - k - sum(1 for elem in range(k, n) if freq[elem] > 0)
    return priority
```

This version of `priority_v1` should provide a better estimate of the priority for adding `k` to the Salem-Spencer set compared to `priority_v0`. The code is also relatively short and only makes small changes to the original function.