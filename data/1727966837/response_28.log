Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n`. This is a simple improvement that doesn't significantly change the code length.

```python
def priority_v1(k: int, n: int) -> float:
  """Improved version of `priority_v0`."""
  return len(set(k % i for i in range(1, n + 1)))
```

In this version, we calculate the remainders of `k` when divided by all integers from 1 to `n`, and return the number of unique remainders. This gives a higher priority to numbers that have more unique remainders, which is a simple way to prefer numbers that are more "spread out" in the Salem-Spencer set.

Here's how you can use `funsearch` to run this function with different parameters:

```python
@funsearch.run
def test_priority_v1(k: int, n: int) -> None:
  print(f"priority_v1({k}, {n}): {priority_v1(k, n)}")
```

You can then run this test function with various inputs to see the results. For example:

```
python -m funsearch test_priority_v1 --k 10 --n 10
python -m funsearch test_priority_v1 --k 100 --n 10
```