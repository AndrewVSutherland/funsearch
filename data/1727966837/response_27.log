Here's an improved version of `priority_v1` that considers the number of unique remainders when dividing `k` by `n` and the number of multiples of `k` up to `n`. This version is shorter and makes a small change from `priority_v0`.

```python
def priority_v1(k: int, n: int) -> float:
    """Improved version of `priority_v0`."""
    return len(set(k % i for i in range(1, n + 1))) + sum(1 for i in range(1, n + 1) if i % k == 0)
```

This version calculates the priority by:

1. Finding the unique remainders when dividing `k` by all integers from 1 to `n` (using a set to remove duplicates) and adding their count to the priority.
2. Counting the number of multiples of `k` up to `n` and adding that count to the priority.

This version is more likely to prioritize adding `k` to the Salem-Spencer set when it has many unique remainders or when it has many multiples up to `n`.