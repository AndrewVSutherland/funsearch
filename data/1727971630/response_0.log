Here's an improved version of `priority_v1` that considers the frequency of `k` in the range `[1, n]` and the number of elements already in the Salem-Spencer set. This version uses the `itertools.combinations` function to count the frequency of `k` in all possible combinations of elements.

```python
import itertools

def priority_v1(k: int, n: int, ss_set: set) -> float:
    """Improved version of `priority_v0`."""
    freq = sum(1 for r in range(1, n + 1) for combo in itertools.combinations(range(1, n + 1), r) if k in combo)
    return freq / (n * (n + 1) / 2 - len(ss_set))
```

This version of `priority_v1` takes an additional argument `ss_set`, which represents the current Salem-Spencer set. The priority is calculated as the frequency of `k` divided by the number of possible combinations without the elements already in the `ss_set`. This way, the priority increases with the frequency of `k` and decreases with the size of the `ss_set`.